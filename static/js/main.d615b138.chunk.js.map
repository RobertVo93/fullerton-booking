{"version":3,"sources":["service/common-api.service.ts","share-components/DynamicForm/DynamicFormPropState.ts","share-components/DynamicForm/questions/question-dropdown.ts","share-components/DynamicForm/questions/question-textarea.ts","share-components/DynamicForm/questions/question-textbox.ts","share-components/DynamicForm/questions/question-reference.ts","share-components/DynamicForm/questions/question-datetime.ts","share-components/DynamicForm/questions/question-radiobutton.ts","share-components/Variables/DateTime/DateTimePropsStates.ts","share-components/Variables/DateTime/DateTime.tsx","share-components/Variables/DropdownList/DropDownPropsStates.ts","share-components/Variables/DropdownList/DropdownList.tsx","share-components/Variables/RadioButton/RadioButton.tsx","share-components/Variables/ReferenceList/ReferencePropsStates.ts","share-components/Variables/ReferenceList/Reference.service.ts","share-components/Variables/ReferenceList/ReferenceList.tsx","share-components/DynamicForm/DynamicForm.tsx","serviceWorker.ts","components/Auth/SignUp/SignUpPropsStates.ts","components/Auth/SignUp/SignUp.tsx","components/Auth/Login/LoginPropsStates.ts","components/Auth/Login/Login.tsx","redux/store/user/actions.ts","redux/store/user/types.ts","class/common/keyValue.ts","share-components/Modal/Modal.tsx","configuration/config.ts","service/User.service.ts","components/Toolbar/Toolbar.tsx","class/user.ts","class/booking.ts","service/Booking.service.ts","service/common.service.ts","redux/store/request/actions.ts","redux/store/request/types.ts","components/Booking/Booking.tsx","share-components/Table/Filter/Filter.jsx","share-components/Table/Selection/RowSelection.jsx","share-components/Table/Pagination/TablePaginationActions.jsx","share-components/Table/Filter/GlobalFilter.jsx","share-components/Table/Toolbar/TableToolbar.jsx","share-components/Table/Table.jsx","redux/containers/Bookings/BookingContainer.tsx","components/SecureRoute/SecureRoute.tsx","class/eventType.ts","service/EventType.service.ts","components/EventType/EventType.tsx","redux/containers/EventTypes/EventTypeContainer.tsx","components/Page401/Page401.tsx","App.tsx","redux/store/user/reducers.ts","redux/store/request/reducers.ts","redux/store/index.ts","share-components/Spinner/LoadingSpinner.tsx","share-components/Alert/GlobalAlert.tsx","index.tsx","share-components/DynamicForm/index.ts","share-components/DynamicForm/form.config.ts","share-components/DynamicForm/questions/question-base.ts","configuration/api.config.ts"],"names":["commonAPI","config","api","this","axios","create","getUri","bind","request","get","delete","head","post","put","patch","url","data","response","error","apiConfig","initialDynamicFormStates","originalListFields","listFields","errors","disableSubmitButton","QuestionBase","TextAreaQuestion","options","controlType","type","FormConfig","questionControlType","textarea","TextboxQuestion","textbox","ReferenceQuestion","reference","DateTimeQuestion","datetime","RadioButtonQuestion","radiobutton","initialDateTimeStates","referenceKey","originalDateTime","undefined","dateTime","ContainerDiv","styled","div","DateTimeDiv","DateTime","props","state","handleChangeDateTime","setState","JSON","parse","stringify","date","console","log","onSelectionChange","dateFormat","minDate","Date","selected","showTimeSelect","timeFormat","onChange","React","Component","initialDropDownStates","dropdownKey","originalSelected","searchKey","icon","fontSize","checkedIcon","CustomDropDown","onCloseDropdown","onChangeDropdown","multiple","forEach","value","filter","val","length","push","event","reason","Autocomplete","id","className","onClose","disableCloseOnSelect","autoSelect","autoHighlight","getOptionLabel","option","renderOption","Fragment","Checkbox","style","marginRight","checked","width","renderInput","params","TextField","variant","label","placeholder","RadioButton","handleChange","target","RadioGroup","aria-label","name","map","FormControlLabel","key","control","Radio","initialReferenceStates","ReferenceService","getByUrl","res","success","ReferenceList","referenceService","serverUrl","allReference","displayedData","element","newObj","p","indexOf","displayField","Object","keys","opt","ind","paddingRight","DangerText","color","fontStyle","Margin0","margin","DynamicForm","formConfig","renderErrorMessage","renderQuestion","validateForm","onSelectionChangeCallback","onSelectionReferenceListChange","onselectionDateTimeChange","onRadioSelectionChange","ListFields","disabled","valid","e","newDate","key1","validators","formValidators","require","errorMessage","minLength","maxLength","key2","_id","dropdown","key3","key4","key5","questionKey","err","i","question","htmlFor","hidden","data-text","readOnly","readonly","rows","filterCondition","onSubmit","preventDefault","OnSubmitCallback","field","Boolean","window","location","hostname","match","initialSignUpState","firstName","lastName","email","password","repassword","roles","redirectLoginPage","mandatoryFields","Container","LoginDiv","CustomTextBox","display","borderRadius","backgroundColor","boxShadow","lineHeight","padding","height","border","TextCenter","textAlign","LinkA","a","SignUp","handleLogin","to","LoginRedirectLink","OnRegister","onClick","initialLoginState","rememberMe","redirectRegisterPage","LinkDiv","Login","handleChangeByClick","handleRegisterPage","RegisterPageRedirectLink","OnLogin","logoutUser","meta","ModalActionType","KeyValue","obj","Config","apiServiceURL","login","process","logout","register","bookings","eventTypes","commonMessage","loginError","userNotFound","signUpSuccess","signUpError","deleteSuccess","deleteError","createSuccess","createError","updateSuccess","updateError","roleDefinition","fullertonAdmin","companyHR","alertVariants","primary","secondar","danger","warning","info","light","dark","datetimeFormat","yyyyMMdd","ddMMyyyy","yyyyMMddHHmm","bookingStatus","pendingReview","approved","rejected","bookingEventTypes","UserServiceApi","userLogin","userRegister","credentials","then","catch","user","Toolbar","userService","renderBookingManagement","renderProfileLink","userLogout","result","Nav","Link","as","isAdmin","NavDropdown","title","Item","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","MapDispatchToProps","connect","store","currentUser","User","role","token","isHr","Booking","status","eventType","proposedDateTime1","proposedDateTime2","proposedDateTime3","choosenDateTime","reasonForRejection","createdBy","createdDate","updatedBy","updatedDate","BookingService","configs","axiosConfig","getAllData","getById","getByUser","createNew","update","deleteRecords","getQuestion","objs","record","questions","inputTypeDef","text","order","searchBar","sort","b","form","booking","formRecord","ReactModal","show","handleClose","handleSubmit","onActionFire","CANCEL","OK","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","modalTitle","Body","CommonService","format","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","replace","toString","fixedFormatTwoDigit","number","updateRequest","noRequests","payload","updateAlert","alert","UiActionContainerDiv","initialBookingStates","modalConfig","redirectToBookingList","BookingComponent","bookingService","commonService","handleApprove","handleReject","handleCancel","renderUiAction","handleBookingModalAction","bookingId","convertFormToObject","reload","accessor","convertDateToStringByFormat","action","proposedDates","confirm","Button","pathname","isNeedReload","withRouter","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","stopPropagation","SelectColumnFilter","useMemo","Set","row","values","add","fuzzyTextFilterFn","matchSorter","autoRemove","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","useStyles","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","classes","useTheme","page","rowsPerPage","onChangePage","IconButton","direction","Math","ceil","max","search","position","shape","fade","palette","common","white","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","InputBase","input","inputProps","useToolbarStyles","formControl","minWidth","maxWidth","paddingLeft","highlight","secondary","main","lighten","flex","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","TableToolbar","numSelected","deleteRecordHandler","addRecordHandler","TableName","allColumns","showAddRecord","clsx","Tooltip","Typography","FormControl","InputLabel","Select","labelId","Input","renderValue","join","MenuItem","getToggleHiddenProps","ListItemText","Table","columns","fetchData","controlledPageCount","pageCount","skipPageReset","selectedId","showSelection","filterTypes","fuzzyText","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","autoResetPage","initialState","hiddenColumns","useGlobalFilter","useFilters","useSortBy","usePagination","useRowSelect","hooks","unshift","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","gotoPage","setPageSize","pageIndex","pageSize","selectedRowIds","TableContainer","selectedRowIndex","x","parseInt","selectedRecord","_","includes","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","TableCell","getHeaderProps","getSortByToggleProps","render","TableSortLabel","active","isSorted","isSortedDesc","canFilter","columnDisableGlobalFilter","TableBody","getRowProps","cells","cell","getCellProps","TableFooter","TablePagination","colSpan","SelectProps","native","newPage","onChangeRowsPerPage","Number","ActionsComponent","BookingContainer","allBooking","bookingList","isLoading","deleteBookingHandler","addBookingHandler","handleCreateBookingAction","records","original","exact","path","SecureRoute","adminOnly","component","Route","appState","EventType","EventTypeService","initialEventTypeStates","EventTypeComponent","eventTypeService","eventTypeId","message","EventTypeContainer","allEventTypes","deleteEventTypeHandler","addEventTypeHandler","handleCreateEventTypeAction","undeleteable","Page401","minHeight","App","redirectLogin","redirectHome","handleOnSubmitLoginForm","handleOnSubmitRegisterForm","handleRenderRedirectRouter","username","loginUser","newUser","userList","numberOfRequest","alertConfig","persistConfig","storage","rootReducer","combineReducers","persistedReducer","persistReducer","middlewareConfig","interceptors","req","getState","dispatch","getSourceAction","Authorization","middleWareEnhancer","applyMiddleware","axiosMiddleware","createStore","composeWithDevTools","persistor","persistStore","override","css","LoadingSpinner","size","loading","CloseButton","AlertStyle","GlobalAlert","setTimeout","Alert","handleOnCloseButton","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","button","checkbox","datetimeLocal","file","image","radio","range","reset","submit","tel","time","week","required","qs","timeout","baseURL","Accept","paramsSerializer","indices"],"mappings":"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","file":"static/js/main.d615b138.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from \"axios\";\nimport { apiConfig } from \"../configuration/api.config\";\n\nclass Api {\n    [x: string]: any;\n    api: AxiosInstance;\n    /**\n     * Creates an instance of Api.\n     *\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios configuration.\n     * @memberof Api\n     */\n    public constructor(config?: AxiosRequestConfig) {\n        this.api = axios.create(config);\n\n        this.getUri = this.getUri.bind(this);\n        this.request = this.request.bind(this);\n        this.get = this.get.bind(this);\n        this.delete = this.delete.bind(this);\n        this.head = this.head.bind(this);\n        this.post = this.post.bind(this);\n        this.put = this.put.bind(this);\n        this.patch = this.patch.bind(this);\n    }\n\n    /**\n     * Get Uri\n     *\n     * @param {import(\"axios\").AxiosRequestConfig} [config]\n     * @returns {string}\n     * @memberof Api\n     */\n    public getUri(config?: AxiosRequestConfig): string {\n        return this.api.getUri(config);\n    }\n\n    /**\n     * Generic request.\n     *\n     * @access public\n     * @template T - `TYPE`: expected object.\n     * @template R - `RESPONSE`: expected object inside a axios response format.\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\n     * @returns {Promise<R>} - HTTP axios response payload.\n     * @memberof Api\n     *\n     * @example\n     * api.request({\n     *   method: \"GET|POST|DELETE|PUT|PATCH\"\n     *   baseUrl: \"http://www.domain.com\",\n     *   url: \"/api/v1/users\",\n     *   headers: {\n     *     \"Content-Type\": \"application/json\"\n     *  }\n     * }).then((response: AxiosResponse<User>) => response.data)\n     *\n     */\n    public request<T, R = AxiosResponse<T>>(config: AxiosRequestConfig): Promise<R> {\n        return this.api.request(config);\n    }\n\n    /**\n     * HTTP GET method, used to fetch data `statusCode`: 200.\n     *\n     * @access public\n     * @template T - `TYPE`: expected object.\n     * @template R - `RESPONSE`: expected object inside a axios response format.\n     * @param {string} url - endpoint you want to reach.\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\n     * @returns {Promise<R>} HTTP `axios` response payload.\n     * @memberof Api\n     */\n    public get<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\n        return this.api.get(url, config);\n    }\n\n    /**\n     * HTTP DELETE method, `statusCode`: 204 No Content.\n     *\n     * @access public\n     * @template T - `TYPE`: expected object.\n     * @template R - `RESPONSE`: expected object inside a axios response format.\n     * @param {string} url - endpoint you want to reach.\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\n     * @returns {Promise<R>} - HTTP [axios] response payload.\n     * @memberof Api\n     */\n    public delete<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\n        return this.api.delete(url, config);\n    }\n\n    /**\n     * HTTP HEAD method.\n     *\n     * @access public\n     * @template T - `TYPE`: expected object.\n     * @template R - `RESPONSE`: expected object inside a axios response format.\n     * @param {string} url - endpoint you want to reach.\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\n     * @returns {Promise<R>} - HTTP [axios] response payload.\n     * @memberof Api\n     */\n    public head<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\n        return this.api.head(url, config);\n    }\n\n    /**\n     * HTTP POST method `statusCode`: 201 Created.\n     *\n     * @access public\n     * @template T - `TYPE`: expected object.\n     * @template B - `BODY`: body request object.\n     * @template R - `RESPONSE`: expected object inside a axios response format.\n     * @param {string} url - endpoint you want to reach.\n     * @param {B} data - payload to be send as the `request body`,\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\n     * @returns {Promise<R>} - HTTP [axios] response payload.\n     * @memberof Api\n     */\n    public post<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\n        return this.api.post(url, data, config);\n    }\n\n    /**\n     * HTTP PUT method.\n     *\n     * @access public\n     * @template T - `TYPE`: expected object.\n     * @template B - `BODY`: body request object.\n     * @template R - `RESPONSE`: expected object inside a axios response format.\n     * @param {string} url - endpoint you want to reach.\n     * @param {B} data - payload to be send as the `request body`,\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\n     * @returns {Promise<R>} - HTTP [axios] response payload.\n     * @memberof Api\n     */\n    public put<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\n        return this.api.put(url, data, config);\n    }\n\n    /**\n      * HTTP PATCH method.\n      *\n      * @access public\n      * @template T - `TYPE`: expected object.\n      * @template B - `BODY`: body request object.\n      * @template R - `RESPONSE`: expected object inside a axios response format.\n      * @param {string} url - endpoint you want to reach.\n      * @param {B} data - payload to be send as the `request body`,\n      * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\n      * @returns {Promise<R>} - HTTP [axios] response payload.\n      * @memberof Api\n      */\n    public patch<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\n        return this.api.patch(url, data, config);\n    }\n\n    /**\n     *\n     * @template T - type.\n     * @param {import(\"axios\").AxiosResponse<T>} response - axios response.\n     * @returns {T} - expected object.\n     * @memberof Api\n     */\n    public success<T>(response: AxiosResponse<T>): T {\n        return response.data;\n    }\n\n    public error(error: AxiosError<Error>) {\n        throw error;\n    }\n}\n\nexport const commonAPI = new Api(apiConfig);","import { QuestionBase } from \"./questions/question-base\";\n\n\nexport interface DynamicFormProps {\n    ListFields: QuestionBase<string>[],\n    OnSubmitCallback: (form: DynamicFormStates) => void\n}\n\nexport interface DynamicFormStates {\n    originalListFields: any,\n    listFields: any,\n    errors:{[s:string]: string[]},\n    disableSubmitButton: boolean\n    \n}\n\nexport const initialDynamicFormStates: DynamicFormStates = {\n    originalListFields: {},\n    listFields : {},\n    errors: {},\n    disableSubmitButton: true\n}","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class DropdownQuestion extends QuestionBase<string> {\n  controlType = '';\n  options: {key: string, value: string}[] = [];\n\n  constructor(options: any) {\n    super(options);\n    this.options = options['options'] || [];\n    this.controlType = new FormConfig().questionControlType.dropdown;\n  }\n}\n","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class TextAreaQuestion extends QuestionBase<string> {\n  controlType = '';\n  type: string;\n\n  constructor(options: any) {\n    super(options);\n    this.type = options['type'] || '';\n    this.controlType = new FormConfig().questionControlType.textarea;\n  }\n}\n","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class TextboxQuestion extends QuestionBase<string> {\n  controlType = '';\n  type: string;\n\n  constructor(options: any) {\n    super(options);\n    this.type = options['type'] || '';\n    this.controlType = new FormConfig().questionControlType.textbox;\n  }\n}\n","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class ReferenceQuestion extends QuestionBase<string> {\n  controlType = '';\n\n  constructor(options: any) {\n    super(options);\n    this.controlType = new FormConfig().questionControlType.reference;\n  }\n}\n","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class DateTimeQuestion extends QuestionBase<Date> {\n  controlType = '';\n\n  constructor(options: any) {\n    super(options);\n    this.controlType = new FormConfig().questionControlType.datetime;\n  }\n}\n","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class RadioButtonQuestion extends QuestionBase<any> {\n  controlType = '';\n  options: {key: string, value: string}[] = [];\n\n  constructor(options: any) {\n    super(options);\n    this.options = options['options'] || [];\n    this.controlType = new FormConfig().questionControlType.radiobutton;\n  }\n}\n","export interface DateTimeProps {\n    dateTime?: Date,\n    onSelectionChange: (selected: DateTimeStates) => void,\n    referenceKey: string\n}\n\nexport interface DateTimeStates {\n    referenceKey: string,\n    originalDateTime?: Date,\n    dateTime?: Date,\n}\n\nexport const initialDateTimeStates: DateTimeStates = {\n    referenceKey: '',\n    originalDateTime: undefined,\n    dateTime: undefined\n}","/**\n * Require react-datepicker\n */\nimport React from 'react';\nimport ReactDatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport styled from 'styled-components';\n\nimport { DateTimeProps, DateTimeStates, initialDateTimeStates } from './DateTimePropsStates';\nimport './DateTime.scss';\n\nconst ContainerDiv = styled.div`\n    width: 100%;\n`;\nconst DateTimeDiv = styled.div`\n    display: inline-block;\n    width: 100%;\n`;\nexport class DateTime extends React.Component<DateTimeProps, DateTimeStates>{\n    constructor(props: DateTimeProps) {\n        super(props);\n        this.state = initialDateTimeStates;\n        this.handleChangeDateTime = this.handleChangeDateTime.bind(this);\n    }\n\n    componentDidMount() {\n        let dateTime = this.props.dateTime ? this.props.dateTime : undefined;\n        this.setState({\n            referenceKey: this.props.referenceKey,\n            dateTime: dateTime,\n            originalDateTime: this.props.dateTime ? JSON.parse(JSON.stringify(dateTime)) : undefined\n        });\n    }\n\n    componentDidUpdate() {\n        if(this.props.dateTime){\n            //update state when the comming props changed\n            if (JSON.stringify(this.state.originalDateTime) !== JSON.stringify(this.props.dateTime)) {\n                this.setState({\n                    dateTime: this.props.dateTime,\n                    originalDateTime: JSON.parse(JSON.stringify(this.props.dateTime))\n                });\n            }\n        }\n    }\n\n    /**\n     * handle date selection changed\n     * @param date selected date\n     */\n    handleChangeDateTime(date: Date) {\n        console.log(date);\n        this.setState({\n            dateTime: date\n        }, () => {\n            this.props.onSelectionChange(this.state);\n        });\n    }\n\n    render() {\n        return (\n            <ContainerDiv>\n                <DateTimeDiv>\n                    <ReactDatePicker\n                        dateFormat=\"yyyy/MM/dd, HH:mm\"\n                        minDate={new Date()}\n                        selected={this.state.dateTime}\n                        showTimeSelect\n                        timeFormat=\"HH:mm\"\n                        onChange={this.handleChangeDateTime}\n                    />\n                </DateTimeDiv>\n            </ContainerDiv>\n        )\n    }\n}","import { KeyValue } from \"../../../class/common/keyValue\";\n\nexport interface DropDownProps {\n    options: KeyValue[],\n    dropdownKey: string,\n    onSelectionChange: (selected: DropDownStates) => void,\n    selected?: any,\n    multiple?: boolean\n}\n\nexport interface DropDownStates {\n    dropdownKey: string,\n    originalSelected: any,\n    selected: any,\n    searchKey: string,\n}\n\nexport const initialDropDownStates: DropDownStates = {\n    dropdownKey: '',\n    originalSelected: null,\n    selected: null,\n    searchKey: ''\n}","import React from 'react';\nimport { TextField, Checkbox } from '@material-ui/core';\nimport Autocomplete, { AutocompleteCloseReason, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nimport { DropDownProps, DropDownStates, initialDropDownStates } from './DropDownPropsStates';\nimport './DropdownList.scss';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nexport class CustomDropDown extends React.Component<DropDownProps, DropDownStates>{\n    constructor(props: DropDownProps) {\n        super(props);\n\n        this.state = initialDropDownStates;\n        this.onCloseDropdown = this.onCloseDropdown.bind(this);\n        this.onChangeDropdown = this.onChangeDropdown.bind(this);\n    }\n\n    componentDidMount() {\n        //set selected value for default\n        let selected = this.state.selected;    //default option\n        if (this.props.selected)\n            selected = this.props.selected;\n\n        //get selected items to show checkbox if multiple autocomplete is enable\n        if (this.props.multiple) {\n            selected = [];\n            this.props.options.forEach((value) => {\n                if (selected && (selected as any[]).filter((val) => { return val[\"key\"] === value[\"key\"] }).length === 1) {\n                    selected.push(value);\n                }\n            });\n        }\n        this.setState({\n            selected: selected,\n            originalSelected: JSON.parse(JSON.stringify(selected)),\n            dropdownKey: this.props.dropdownKey\n        });\n    }\n\n    componentDidUpdate() {\n        //listen in case the selected value is retrieved from server\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\n            //get selected items to show checkbox if multiple autocomplete is enable\n            let selected = this.props.selected;\n            if (this.props.multiple) {\n                selected = [];\n                this.props.options.forEach((value) => {\n                    if (this.props.selected && (this.props.selected as any[]).filter((val) => { return val[\"key\"] === value[\"key\"] }).length === 1) {\n                        selected.push(value);\n                    }\n                });\n            }\n\n            this.setState({\n                selected: selected,\n                originalSelected: JSON.parse(JSON.stringify(selected))\n            });\n        }\n    }\n\n    /**\n     * Handle action close dropdown list\n     * @param event change event\n     * @param reason reason for close\n     */\n    onCloseDropdown(event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason) {\n        //update selected value for the parent component\n        this.props.onSelectionChange(this.state);\n    }\n\n    /**\n     * Handle action change selection\n     * @param event change event\n     * @param value value selected\n     * @param reason reason for change\n     */\n    onChangeDropdown(event: React.ChangeEvent<{}>, value: any, reason: AutocompleteChangeReason) {\n        this.setState({\n            selected: value\n        }, () => {\n            this.props.onSelectionChange(this.state);\n        });\n    }\n\n    render() {\n        return (\n            <Autocomplete\n                multiple={this.props.multiple}\n                id=\"autocomplete-box\"\n                className=\"font-theme\"\n                value={(this.props.multiple && !this.state.selected) ? [] : this.state.selected}\n                onClose={this.onCloseDropdown}\n                onChange={this.onChangeDropdown}\n                options={this.props.options}\n                disableCloseOnSelect={this.props.multiple}\n                autoSelect\n                autoHighlight\n                getOptionLabel={(option) => option['value'] ? option['value'] : ''}\n                renderOption={(option, { selected }) => (\n                    <React.Fragment>\n                        {\n                            this.props.multiple ?\n                                (\n                                    <Checkbox\n                                        icon={icon}\n                                        checkedIcon={checkedIcon}\n                                        style={{ marginRight: 8 }}\n                                        checked={selected}\n                                    />\n                                )\n                                :\n                                ('')\n                        }\n                        <span>{option.value}</span>\n                    </React.Fragment>\n                )}\n                style={{ width: '100%' }}\n                renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Please select items\" placeholder=\"Search for items ...\" />\n                )}\n            />\n        )\n    }\n}","import React from 'react';\nimport { RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\n\ninterface RadioButtonProps {\n    options?: any[],\n    onSelectionChange: (value: any) => void,\n    referenceKey: string\n}\n\nexport interface RadioButtonStates {\n    value: any,\n    referenceKey: string,\n}\n\nexport class RadioButton extends React.Component<RadioButtonProps, RadioButtonStates>{\n    constructor(props: RadioButtonProps) {\n        super(props);\n        this.state = {\n            value: null,\n            referenceKey: this.props.referenceKey\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    /**\n     * Handle selection change\n     * @param event input change event\n     */\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            value: (event.target as HTMLInputElement).value\n        }, ()=>{\n            this.props.onSelectionChange(this.state);\n        });\n    }\n\n    render() {\n        return (\n            <RadioGroup aria-label=\"gender\"\n                name=\"gender1\"\n                value={this.state.value}\n                onChange={this.handleChange}>\n                {\n                    this.props.options?.map((val) => (\n                        <FormControlLabel value={JSON.stringify(val)}\n                            key={`${val.key}_radioButton`}\n                            control={<Radio />}\n                            label={val.value}\n                        />\n                    ))\n                }\n            </RadioGroup>\n        )\n    }\n}","export interface ReferenceProps {\n    serverUrl: string,\n    displayField: string,   //the field will show on search bar\n    listFields?: string[],  //the list of field will show in options\n    filterCondition?: string,\n    onSelectionChange: (selected: ReferenceStates) => void,\n    selected?: any,\n    referenceKey: string,\n    multiple?: boolean\n}\n\nexport interface ReferenceStates {\n    referenceKey: string,\n    originalSelected: any,\n    selected: any,\n    data: any[]\n}\n\nexport const initialReferenceStates: ReferenceStates = {\n    referenceKey: '',\n    originalSelected: null,\n    selected: null,\n    data: []\n}","\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { commonAPI } from \"../../../service/common-api.service\";\n\nexport class ReferenceService {\n    constructor(config: AxiosRequestConfig) {\n        this.getByUrl = this.getByUrl.bind(this);\n    }\n\n    /**\n     * Get data by url\n     */\n    public async getByUrl(url: string): Promise<any[]>{\n        try {\n            const res: AxiosResponse<any[]> = await commonAPI.get<any, AxiosResponse<any[]>>(url);\n            return commonAPI.success(res);\n        } catch (error) {\n            throw error;\n        }\n    }\n}","import React from 'react';\nimport { TextField, Checkbox } from '@material-ui/core';\nimport Autocomplete, { AutocompleteCloseReason, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nimport './ReferenceList.scss';\nimport { ReferenceProps, ReferenceStates, initialReferenceStates } from './ReferencePropsStates';\nimport { ReferenceService } from './Reference.service';\nimport * as apiConfig from '../../../configuration/api.config';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nexport class ReferenceList extends React.Component<ReferenceProps, ReferenceStates>{\n    referenceService: ReferenceService;\n    constructor(props: ReferenceProps) {\n        super(props);\n\n        this.state = initialReferenceStates;\n        this.referenceService = new ReferenceService(apiConfig.apiConfig);\n        this.onCloseDropdown = this.onCloseDropdown.bind(this);\n        this.onChangeDropdown = this.onChangeDropdown.bind(this);\n    }\n\n    async componentDidMount() {\n        //set selected value for default\n        let selected = this.state.selected;\n        if (this.props.selected)\n            selected = this.props.selected;\n\n        let allReference = await this.referenceService.getByUrl(this.props.serverUrl);\n        let displayedData: any[] = [];\n        allReference.forEach(element => {\n            delete element['createdBy'];\n            delete element['createdDate'];\n            delete element['updatedBy'];\n            delete element['updatedDate'];\n            let newObj = JSON.parse(JSON.stringify(element));   //clone object\n            //remove the fields that do not display\n            if (this.props.listFields) {\n                for (let p in newObj) {\n                    if (this.props.listFields.indexOf(p) === -1 && p !== '_id' && p !== this.props.displayField) {\n                        delete newObj[p];\n                    }\n                }\n                displayedData.push(newObj);\n            }\n        });\n        //get selected items to show checkbox if multiple autocomplete is enable\n        if (this.props.multiple) {\n            selected = [];\n            displayedData.forEach((value) => {\n                if (selected && (selected as any[]).filter((val) => { return val[\"_id\"] === value[\"_id\"] }).length === 1) {\n                    selected.push(value);\n                }\n            });\n        }\n\n        this.setState({\n            selected: selected,\n            originalSelected: JSON.parse(JSON.stringify(selected)),\n            referenceKey: this.props.referenceKey,\n            data: displayedData\n        });\n    }\n\n    componentDidUpdate() {\n        //listen in case the selected value is retrieved from server\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\n            //get selected items to show checkbox if multiple autocomplete is enable\n            let selected = this.props.selected;\n            if (this.props.multiple) {\n                selected = [];\n                this.state.data.forEach((value) => {\n                    if (this.props.selected && (this.props.selected as any[]).filter((val) => { return val[\"_id\"] === value[\"_id\"] }).length === 1) {\n                        selected.push(value);\n                    }\n                });\n            }\n            this.setState({\n                selected: selected,\n                originalSelected: JSON.parse(JSON.stringify(selected))\n            });\n        }\n    }\n\n    /**\n     * Handle action close dropdown list\n     * @param event change event\n     * @param reason reason for close\n     */\n    onCloseDropdown(event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason) {\n        //update selected value for the parent component\n        this.props.onSelectionChange(this.state);\n    }\n\n    /**\n     * Handle action change selection\n     * @param event change event\n     * @param value value selected\n     * @param reason reason for change\n     */\n    onChangeDropdown(event: React.ChangeEvent<{}>, value: any, reason: AutocompleteChangeReason) {\n        this.setState({\n            selected: value\n        }, () => {\n            this.props.onSelectionChange(this.state);\n        });\n    }\n\n    render() {\n        return (\n            <Autocomplete\n                multiple={this.props.multiple}\n                id=\"autocomplete-box\"\n                className=\"font-theme\"\n                value={(this.props.multiple && !this.state.selected) ? [] : this.state.selected}\n                onClose={this.onCloseDropdown}\n                onChange={this.onChangeDropdown}\n                options={this.state.data}\n                disableCloseOnSelect={this.props.multiple}\n                autoSelect\n                autoHighlight\n                getOptionLabel={(option) => option[this.props.displayField]}\n                renderOption={(option, { selected }) => (\n                    <React.Fragment>\n                        {\n                            this.props.multiple ?\n                                (\n                                    <Checkbox\n                                        icon={icon}\n                                        checkedIcon={checkedIcon}\n                                        style={{ marginRight: 8 }}\n                                        checked={selected}\n                                    />\n                                )\n                                :\n                                ('')\n                        }\n                        {\n                            Object.keys(option).filter((val) => {\n                                return val !== '_id';\n                            }).map((opt, ind) => (\n                                <span className=\"font-theme\" style={{ paddingRight: '10px' }} key={ind}>{option[opt]}</span>\n                            ))\n                        }\n                    </React.Fragment>\n                )}\n                style={{ width: '100%' }}\n                renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Please select items\" placeholder=\"Search for items ...\" />\n                )}\n            />\n        )\n    }\n}","import React from 'react';\nimport { DynamicFormProps, DynamicFormStates } from './DynamicFormPropState';\nimport styled from 'styled-components';\nimport { QuestionBase } from './questions/question-base';\nimport { FormConfig } from './form.config';\nimport { CustomDropDown, ReferenceList, DateTime, RadioButton, RadioButtonStates } from '../Variables';\nimport { ReferenceStates } from '../Variables/ReferenceList/ReferencePropsStates';\nimport { DropDownStates } from '../Variables/DropdownList/DropDownPropsStates';\nimport { DateTimeStates } from '../Variables/DateTime/DateTimePropsStates';\nconst ContainerDiv = styled.div`\n`;\nconst DangerText: React.CSSProperties = {\n    color: 'red',\n    fontStyle: 'italic'\n};\nconst Margin0: React.CSSProperties = {\n    margin: 0\n};\nexport class DynamicForm extends React.Component<DynamicFormProps, DynamicFormStates>{\n    formConfig: FormConfig;\n    constructor(props: DynamicFormProps) {\n        super(props);\n\n        this.formConfig = new FormConfig();\n        this.state = {\n            originalListFields: {},\n            listFields: {},\n            errors: {},\n            disableSubmitButton: true\n        };\n\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\n        this.renderQuestion = this.renderQuestion.bind(this);\n        this.validateForm = this.validateForm.bind(this);\n        //handle change\n        this.handleChange = this.handleChange.bind(this);\n        this.onSelectionChangeCallback = this.onSelectionChangeCallback.bind(this);\n        this.onSelectionReferenceListChange = this.onSelectionReferenceListChange.bind(this);\n        this.onselectionDateTimeChange = this.onselectionDateTimeChange.bind(this);\n        this.onRadioSelectionChange = this.onRadioSelectionChange.bind(this);\n    }\n\n    componentDidMount() {\n        //wait for update from container element\n        let listFields: { [s: string]: any } = {};\n        this.props.ListFields.forEach((val) => {\n            listFields[val.key] = val.value;\n        });\n        this.setState({\n            listFields: listFields,\n            originalListFields: JSON.parse(JSON.stringify(listFields))\n        });\n    }\n\n    componentDidUpdate() {\n        //wait for update from container element\n        let listFields: { [s: string]: any } = {};\n        this.props.ListFields.forEach((val) => {\n            listFields[val.key] = val.value;\n        });\n        //If list of fields change => update state\n        if (JSON.stringify(this.state.originalListFields) !== JSON.stringify(listFields)) {\n            this.setState({\n                listFields: listFields,\n                originalListFields: JSON.parse(JSON.stringify(listFields))\n            }, () => {\n                //Validate the form\n                let { errors, valid } = this.validateForm();\n                let disabled = !valid;\n                this.setState({\n                    disableSubmitButton: disabled,\n                    errors\n                });\n            });\n        }\n    }\n\n    /**\n     * Handle date time selection changed\n     * @param e date time state\n     */\n    onselectionDateTimeChange(e: DateTimeStates) {\n        let listFields = this.state.listFields;\n        let newDate = e.dateTime;\n        listFields[e.referenceKey] = newDate;\n        //update new value\n        this.setState({\n            listFields: listFields\n        }, () => {\n            //validate the form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        })\n    }\n\n    /**\n     * Handle reference list selected record\n     * @param e reference state\n     */\n    onSelectionReferenceListChange(e: ReferenceStates) {\n        let listFields = this.state.listFields;\n        listFields[e.referenceKey] = e.selected;\n        //udate new value\n        this.setState({\n            listFields\n        }, () => {\n            //validate the form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Handle dropdown list change\n     * @param e Dropdown state\n     */\n    onSelectionChangeCallback(e: DropDownStates) {\n        let listFields = this.state.listFields;\n        listFields[e.dropdownKey] = e.selected;\n        //update new value\n        this.setState<never>({\n            listFields\n        }, () => {\n            //validate form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Handle radio button changed\n     * @param value Radio button state\n     */\n    onRadioSelectionChange(value: RadioButtonStates) {\n        let listFields = this.state.listFields;\n        listFields[value.referenceKey] = value.value ? JSON.parse(value.value) : value.value;\n        //update new value\n        this.setState<never>({\n            listFields\n        }, () => {\n            //validate form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Handle input change\n     * @param event event\n     */\n    handleChange(event: any) {\n        const { name, value } = event.target;\n        let listFields = this.state.listFields;\n        listFields[name] = value;\n        //update new value\n        this.setState<never>({\n            listFields\n        }, () => {\n            //validate form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Validate the form\n     */\n    validateForm() {\n        let valid = true;\n        let errors: { [s: string]: string[] } = {};\n        this.props.ListFields.forEach(element => {\n            errors[element.key] = [];\n            switch (element.controlType) {\n                //validate fields with type textbox and textarea\n                case this.formConfig.questionControlType.textbox:\n                case this.formConfig.questionControlType.textarea:\n                    for (var key1 in element.validators) {\n                        switch (key1) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key] !== \"\")) {\n                                    errors[element.key].push(\n                                        element.validators[key1].errorMessage\n                                    );\n                                }\n                                break;\n                            //min-length\n                            case this.formConfig.formValidators.minLength:\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length >= element.validators[key].value)) {\n                                    errors[element.key].push(\n                                        element.validators[key1].errorMessage\n                                    );\n                                }\n                                break;\n                            //max-length\n                            case this.formConfig.formValidators.maxLength:\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length <= element.validators[key].value)) {\n                                    errors[element.key].push(\n                                        element.validators[key1].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type reference\n                case this.formConfig.questionControlType.reference:\n                    for (var key2 in element.validators) {\n                        switch (key2) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!this.state.listFields[element.key] || this.state.listFields[element.key]._id == null) {\n                                    errors[element.key].push(\n                                        element.validators[key2].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type dropdown\n                case this.formConfig.questionControlType.dropdown:\n                    for (var key3 in element.validators) {\n                        switch (key3) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                //not have value or value is 0 = [--none--]\n                                if (!this.state.listFields[element.key]\n                                    || !this.state.listFields[element.key].key\n                                    || this.state.listFields[element.key].key === 0\n                                ) {\n                                    errors[element.key].push(\n                                        element.validators[key3].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type date time\n                case this.formConfig.questionControlType.datetime:\n                    for (var key4 in element.validators) {\n                        switch (key4) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!this.state.listFields[element.key]) {\n                                    errors[element.key].push(\n                                        element.validators[key4].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type radio button\n                case this.formConfig.questionControlType.radiobutton:\n                    for (var key5 in element.validators) {\n                        switch (key5) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!this.state.listFields[element.key]) {\n                                    errors[element.key].push(\n                                        element.validators[key5].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n        });\n        //look at errors\n        for (var key in errors) {\n            if (errors[key].length > 0) {\n                valid = false;\n                break;\n            }\n        }\n        return { errors, valid };\n    }\n\n    /**\n     * Render error message base on question key\n     * @param questionKey question key\n     */\n    renderErrorMessage(questionKey: string) {\n        //get state.error message base on question key\n        let errors = this.state.errors[questionKey];\n        //if there is no error => return\n        if (!errors) return;\n        //else display error message\n        return (\n            <div style={DangerText}>\n                {\n                    errors.map((err, i) => (\n                        <div key={i}>\n                            <span>{err}</span>\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n\n    /**\n     * Render questions\n     * @param question question definition\n     */\n    renderQuestion(question: QuestionBase<any>) {\n        //depend on type of question => render appropriate element\n        switch (question.controlType) {\n            //question type = textbox\n            case this.formConfig.questionControlType.textbox:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <input className=\"form-control\"\n                            onChange={this.handleChange}\n                            readOnly={question.readonly}\n                            type={question.type}\n                            name={question.key}\n                            value={this.state.listFields[question.key] || ''}\n                            id={question.key} />\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                );\n            //question type = textarea\n            case this.formConfig.questionControlType.textarea:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <textarea className=\"form-control\"\n                            onChange={this.handleChange}\n                            readOnly={question.readonly}\n                            rows={question.rows}\n                            name={question.key}\n                            value={this.state.listFields[question.key]}\n                            id={question.key} ></textarea>\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                );\n            //question type = dropdown list\n            case this.formConfig.questionControlType.dropdown:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <CustomDropDown\n                            selected={question.value}\n                            dropdownKey={question.key}\n                            onSelectionChange={this.onSelectionChangeCallback}\n                            options={question.options}\n                            multiple={question.multiple}\n                        ></CustomDropDown>\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                );\n            //question type = reference\n            case this.formConfig.questionControlType.reference:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        {\n\n                            <ReferenceList serverUrl={question.serverUrl}\n                                displayField={question.displayField}\n                                listFields={question.listFields}\n                                filterCondition={question.filterCondition}\n                                referenceKey={question.key}\n                                selected={question.value}\n                                onSelectionChange={this.onSelectionReferenceListChange}\n                                multiple={question.multiple}\n                            ></ReferenceList>\n\n                        }\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            //question type = date time\n            case this.formConfig.questionControlType.datetime:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <DateTime referenceKey={question.key}\n                            dateTime={question.value}\n                            onSelectionChange={this.onselectionDateTimeChange}>\n                        </DateTime>\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            //question type = Radio button\n            case this.formConfig.questionControlType.radiobutton:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <RadioButton onSelectionChange={this.onRadioSelectionChange}\n                            referenceKey={question.key}\n                            options={question.options} />\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            default:\n                break;\n        }\n    }\n\n    render() {\n        return (\n            <ContainerDiv>\n                <form onSubmit={(e) => { e.preventDefault(); this.props.OnSubmitCallback(this.state) }}>\n                    {this.props.ListFields.map((field, i) => (\n                        this.renderQuestion(field)\n                    ))}\n                    <input style={Margin0}\n                        type=\"submit\"\n                        value=\"Submit\"\n                        disabled={this.state.disableSubmitButton}\n                        className=\"btn btn-primary btn-block\" />\n                </form>\n            </ContainerDiv>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export interface SignUpProp {\n\tOnRegister: (form:SignUpState) => void,\n\tLoginRedirectLink: string\n}\n\nexport type SignUpState = {\n\tfirstName: string,\n\tlastName: string,\n\temail: string,\n\tpassword: string,\n\trepassword: string,\n\troles: [],\n\tredirectLoginPage: boolean,\n\tdisableSubmitButton: boolean,\n\terrors: any,\n\tmandatoryFields: any\n}\n\nexport const initialSignUpState: SignUpState = {\n\tfirstName: '',\n\tlastName: '',\n\temail: '',\n\tpassword: '',\n\trepassword: '',\n\troles: [],\n\tredirectLoginPage: false,\n\tdisableSubmitButton: true,\n\terrors: {\n\t\tfirstName: 'First Name is required',\n\t\tlastName: 'Last Name is required',\n\t\temail: 'Email is required',\n\t\tpassword: 'Password is required',\n\t\trepassword: 'Re-Password is required'\n\t},\n\tmandatoryFields: {\n\t\tfirstName: true,\n\t\tlastName: true,\n\t\temail: true,\n\t\tpassword: true,\n\t\trepassword: true\n\t}\n}","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { SignUpProp, SignUpState, initialSignUpState } from \"./SignUpPropsStates\";\n\nconst Container = styled.div`\n    padding-top: 30px;\n    padding-bottom: 20px;\n`;\nconst LoginDiv = styled.div`\n    width: 400px;\n    margin: auto;\n    background-color: #e9ecef;\n    padding: 40px;\n    border-radius: 15px;\n`;\nconst CustomTextBox: React.CSSProperties = {\n    display: 'block',\n    width: '100%',\n    borderRadius: '.25rem',\n    backgroundColor: '#f5f5f5',\n    boxShadow: 'none',\n    color: '#565656',\n    lineHeight: 1.43,\n    padding: '1.07em 0.5em',\n    height: 'calc(2.25rem + 2px)',\n    border: '1px solid #e8e8e8'\n}\nconst Margin0: React.CSSProperties = {\n    margin: 0\n};\nconst TextCenter: React.CSSProperties = {\n    textAlign: 'center'\n};\nconst DangerText: React.CSSProperties = {\n    color: 'red',\n    fontStyle: 'italic'\n};\nconst LinkA = styled.a`\n    color: #149dcc !important;\n    cursor: pointer;\n`;\nexport default class SignUp extends Component<SignUpProp, SignUpState> {\n    constructor(props: SignUpProp) {\n        super(props);\n\n        //initial variable\n        this.state = initialSignUpState;\n\n        //binding functions\n        this.handleChange = this.handleChange.bind(this);\n        this.validateForm = this.validateForm.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\n    }\n\n    /**\n     * handle change value of form\n     * @param event Change event\n     */\n    handleChange(event: any) {\n        const { name, value } = event.target;\n        this.setState<never>({\n            [name]: value\n        }, () => {\n            //validate form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Validate the sign up form\n     */\n    validateForm() {\n        let valid = true;\n        let errors: { [s: string]: string } = {};\n        errors['firstName'] = this.state.firstName.length > 0 ? \"\" : \"First Name is required\";\n        errors['lastName'] = this.state.lastName.length > 0 ? \"\" : \"Last Name is required\";\n        errors['email'] = this.state.email.length > 0 ? \"\" : \"Email is required\";\n        errors['password'] = this.state.password.length > 0 ? \"\" : \"Password is required\";\n        errors['repassword'] = this.state.repassword.length > 0 ? \"\" : \"Re-Password is required\";\n        if(this.state.repassword  !== \"\" && this.state.password !== this.state.repassword){\n            errors.repassword = \"Password and Re-Password are not match\";\n        }\n\n        for (var key in errors) {\n            if (errors[key].length > 0) {\n                valid = false;\n                break;\n            }\n        }\n        return { errors, valid };\n    }\n\n    /**\n     * Render error message base on question key\n     * @param questionKey question key\n     */\n    renderErrorMessage(questionKey: string) {\n        //get state.error message base on question key\n        let errors = this.state.errors[questionKey];\n        //if there is no error => return\n        if (!errors || errors === \"\") return;\n        //else display error message\n        return (\n            <div style={DangerText}>\n                {\n                    <div key={questionKey}>\n                        <span>{errors}</span>\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    /**\n     * Handle redirect to login page\n     */\n    handleLogin() {\n        this.setState({\n            redirectLoginPage: true\n        });\n    }\n\n    render() {\n        if (this.state.redirectLoginPage) {\n            return <Redirect push={true} to={this.props.LoginRedirectLink} />\n        }\n        return (\n            <Container>\n                <LoginDiv>\n                    <form onSubmit={(e) => { e.preventDefault(); this.props.OnRegister(this.state) }}>\n                        <h3 style={TextCenter}>Sign Up</h3>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"firstName\">\n                                <span style={DangerText}>* </span><span data-text=\"First name\">First name</span>\n                            </label>\n                            <input name=\"firstName\"\n                                type=\"text\"\n                                onChange={this.handleChange}\n                                style={CustomTextBox}\n                                placeholder=\"First name\" />\n                            {this.renderErrorMessage('firstName')}\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"lastName\">\n                                <span style={DangerText}>* </span><span data-text=\"Last name\">Last name</span>\n                            </label>\n                            <input name=\"lastName\"\n                                type=\"text\"\n                                onChange={this.handleChange}\n                                style={CustomTextBox}\n                                placeholder=\"Last name\" />\n                            {this.renderErrorMessage('lastName')}\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">\n                                <span style={DangerText}>* </span><span data-text=\"Email address\">Email address</span>\n                            </label>\n                            <input name=\"email\"\n                                type=\"email\"\n                                onChange={this.handleChange}\n                                style={CustomTextBox}\n                                placeholder=\"Enter email\" />\n                            {this.renderErrorMessage('email')}\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">\n                                <span style={DangerText}>* </span><span data-text=\"Password\">Password</span>\n                            </label>\n                            <input name=\"password\"\n                                type=\"password\"\n                                onChange={this.handleChange}\n                                style={CustomTextBox}\n                                placeholder=\"Enter password\" />\n                            {this.renderErrorMessage('password')}\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"repassword\">\n                                <span style={DangerText}>* </span><span data-text=\"Re-Password\">Re-Password</span>\n                            </label>\n                            <input name=\"repassword\"\n                                type=\"password\"\n                                onChange={this.handleChange}\n                                style={CustomTextBox}\n                                placeholder=\"Re-Enter password\" />\n                            {this.renderErrorMessage('repassword')}\n                        </div>\n\n                        <button style={Margin0}\n                            disabled={this.state.disableSubmitButton}\n                            type=\"submit\"\n                            className=\"btn btn-primary btn-block\">\n                            Sign Up\n                        </button>\n                        <p className=\"forgot-password text-right\">\n                            Already registered <LinkA onClick={this.handleLogin}>Login?</LinkA>\n                        </p>\n                    </form>\n                </LoginDiv>\n            </Container>\n        );\n    }\n}","export interface LoginProps {\n\tOnLogin: (form:LoginState) => void,\n\tRegisterPageRedirectLink: string\n}\n\nexport type LoginState = {\n\temail: string,\n\tpassword: string,\n\trememberMe: boolean,\n\tdisableSubmitButton: boolean,\n\tredirectRegisterPage: boolean\n}\n\nexport const initialLoginState: LoginState = {\n\temail: '',\n\tpassword: '',\n\trememberMe: false,\n\tdisableSubmitButton: true,\n\tredirectRegisterPage: false\n}","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Redirect } from \"react-router-dom\";\nimport { LoginProps, LoginState, initialLoginState } from \"./LoginPropsStates\";\nconst Container = styled.div`\n            padding-top: 30px;\n            padding-bottom: 20px;\n        `;\nconst LoginDiv = styled.div`\n            width: 400px;\n            margin: auto;\n            background-color: #e9ecef;\n            padding: 40px;\n            border-radius: 15px;\n        `;\nconst LinkDiv = styled.div`\n            margin-top: 15px;\n        `;\nconst LinkA = styled.a`\n    color: #149dcc !important;\n    cursor: pointer;\n`;\nexport default class Login extends Component<LoginProps, LoginState> {\n    constructor(props: LoginProps) {\n        super(props);\n\n        this.state = initialLoginState;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleChangeByClick = this.handleChangeByClick.bind(this);\n        this.handleRegisterPage = this.handleRegisterPage.bind(this);\n    }\n\n    /**\n     * Handle change form's fields\n     * @param event change event\n     */\n    handleChange(event: any) {\n        this.setState<never>({\n            [event.target.name]: event.target.value\n        }, () => {\n            let disabled = this.state.email !== '' && this.state.password !== '' ? false : true;\n            this.setState({\n                disableSubmitButton: disabled\n            });\n        });\n    }\n\n    /**\n     * handle state change by click\n     * @param event click event\n     */\n    handleChangeByClick(event: any) {\n        this.setState<never>({\n            [event.target.name]: event.target.checked\n        });\n    }\n\n    /**\n     * handle click register page\n     */\n    handleRegisterPage() {\n        this.setState({\n            redirectRegisterPage: true\n        })\n    }\n\n    render() {\n        //redirect to register page\n        if (this.state.redirectRegisterPage) {\n            return <Redirect push={true} to={this.props.RegisterPageRedirectLink} />\n        }\n        //load login form\n        return (\n            <Container>\n                <LoginDiv>\n                    <form onSubmit={(e) => { e.preventDefault(); this.props.OnLogin(this.state) }}>\n                        <h3 style={{ textAlign: 'center' }}>Login</h3>\n\n                        <div className=\"form-group\">\n                            <label><strong>Email address</strong></label>\n                            <input name=\"email\"\n                                type=\"email\"\n                                onChange={this.handleChange}\n                                className=\"form-control\"\n                                placeholder=\"Enter email\" />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label><strong>Password</strong></label>\n                            <input name=\"password\"\n                                type=\"password\"\n                                onChange={this.handleChange}\n                                className=\"form-control\"\n                                placeholder=\"Enter password\" />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <div className=\"custom-control custom-checkbox\">\n                                <input name=\"rememberMe\"\n                                    type=\"checkbox\"\n                                    className=\"custom-control-input\"\n                                    onClick={this.handleChangeByClick}\n                                    id=\"customCheck1\" />\n                                <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\n                                    <strong>Remember me</strong>\n                                </label>\n                            </div>\n                        </div>\n\n                        <input style={{ margin: 0 }}\n                            type=\"submit\"\n                            value=\"Submit\"\n                            className=\"btn btn-primary btn-block\"\n                            disabled={this.state.disableSubmitButton}\n                        />\n                        <LinkDiv>\n                            <p className=\"float-left\">\n                                <LinkA className=\"App-link\" onClick={this.handleRegisterPage}>Sign Up</LinkA>\n                            </p>\n                        </LinkDiv>\n                    </form>\n                </LoginDiv>\n            </Container>\n        );\n    }\n}","import { USER_LOGOUT, USER_LOGIN } from \"./types\";\nimport { User } from \"../../../class/user\";\n\nexport function loginUser(loginUser: User) {\n  return {\n    type: USER_LOGIN,\n    payload: loginUser\n  };\n}\n\nexport function logoutUser() {\n  return {\n    type: USER_LOGOUT,\n    meta: {}\n  };\n}\n","import { User } from \"../../../class/user\";\n\n// Describing the different ACTION NAMES available\nexport const USER_LOGIN = \"USER_LOGIN\";\nexport const USER_LOGOUT = \"USER_LOGOUT\";\n\ninterface UserLoginAction {\n  type: typeof USER_LOGIN;\n  payload: User;\n}\n\ninterface UserLogoutAction {\n  type: typeof USER_LOGOUT;\n  meta: {\n    timestamp: number;\n  };\n}\n\nexport type UserActionTypes = UserLoginAction | UserLogoutAction;\n","export class KeyValue{\n    constructor(obj?: KeyValue){\n        this.key = obj ? obj.key : null;\n        this.value = obj ? obj.value : null;\n    }\n    key: any;\n    value: any;\n}","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport { DynamicForm, DynamicFormStates, initialDynamicFormStates } from '../DynamicForm';\n\ninterface ReactModalProps {\n    show: boolean,\n    modalTitle?: string,\n    onActionFire: (action: any, form: DynamicFormStates) => void,\n    questions: any\n}\n\ninterface ReactModalState {\n    show: boolean;\n}\n\nexport enum ModalActionType {\n    OK = 'OK',\n    CANCEL = 'CANCEL'\n}\n\nexport class ReactModal extends React.Component<ReactModalProps, ReactModalState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            show: false\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            show: this.props.show\n        });\n    }\n\n    /**\n     * Handle user's action: close modal\n     */\n    handleClose() {\n        this.setState({\n            show: false\n        }, () => {\n            this.props.onActionFire(ModalActionType.CANCEL, initialDynamicFormStates);\n        });\n    }\n\n    /**\n     * Handle user's action: submit modal\n     * @param form \n     */\n    handleSubmit(form: DynamicFormStates) {\n        this.setState({\n            show: false\n        }, () => {\n            this.props.onActionFire(ModalActionType.OK, form);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    show={this.state.show}\n                    onHide={this.handleClose}\n                    backdrop=\"static\"\n                    keyboard={false}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.props.modalTitle}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <DynamicForm ListFields={this.props.questions} OnSubmitCallback={this.handleSubmit} />\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}","import { KeyValue } from \"../class/common/keyValue\"\n\nexport class Config {\n    apiServiceURL = {\n        login: `${process.env.REACT_APP_SERVER_URL}/api/login`,\n        logout: `${process.env.REACT_APP_SERVER_URL}/api/logout`,\n        register:`${process.env.REACT_APP_SERVER_URL}/api/register`,\n        bookings: `${process.env.REACT_APP_SERVER_URL}/api/bookings`,\n        eventTypes: `${process.env.REACT_APP_SERVER_URL}/api/eventtypes`\n    }\n\n    commonMessage = {\n        loginError: 'Login error!!!',\n        userNotFound: 'User not found!!!',\n        signUpSuccess: 'Register success!!!',\n        signUpError: 'Register error!!!',\n        deleteSuccess: 'Delete success!!!',\n        deleteError: 'Delete error!!!',\n        createSuccess: 'Create success!!!',\n        createError: 'Create error!!!',\n        updateSuccess: 'Update success!!!',\n        updateError: 'Update error!!!'\n    }\n\n    roleDefinition = {\n        fullertonAdmin: 1,\n        companyHR: 2\n    }\n\n    alertVariants = {\n        primary :'primary',\n        secondar :'secondary',\n        success :'success',\n        danger :'danger',\n        warning :'warning',\n        info :'info',\n        light :'light',\n        dark :'dark'\n    }\n\n    datetimeFormat = {\n        yyyyMMdd: 'yyyy/MM/dd',\n        ddMMyyyy: 'dd/mm/yyyy',\n        yyyyMMddHHmm: 'yyyy/MM/dd HH:mmm'\n    }\n    \n    bookingStatus = {\n        pendingReview: new KeyValue({key: 1, value: 'Pending Review'}),\n        approved: new KeyValue({key: 2, value: 'Approved'}),\n        rejected: new KeyValue({key: 3, value: 'Rejected'})\n    }\n\n    /**\n     * later implement from database\n     */\n    bookingEventTypes:any = {\n        'healthTalk': new KeyValue({key: 1, value: 'Dropdown with Health Talk'}),\n        'wellnessEvents': new KeyValue({key: 2, value: 'Wellness Events'}),\n        'fitnessActivities': new KeyValue({key: 3, value: 'Fitness Activities'})\n    }\n\n}","import { AxiosError, AxiosResponse } from \"axios\";\nimport { Config } from \"../configuration/config\";\nimport { Credentials } from \"../interface/Credentials\";\nimport { commonAPI } from \"./common-api.service\";\nimport { User } from \"../class/user\";\nimport { JwtResponse } from \"../class/common/response-data\";\n\nexport class UserServiceApi {\n    config: Config;\n    constructor() {\n\n        this.userLogin = this.userLogin.bind(this);\n        this.userRegister = this.userRegister.bind(this);\n        this.config = new Config();\n    }\n\n    /**\n     * Handle login request\n     * @param credentials user's infor\n     */\n    public userLogin(credentials: Credentials): Promise<JwtResponse> {\n        return commonAPI.post<string, Credentials, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.login, credentials)\n            .then((res) => {\n                return commonAPI.success(res);\n            })\n            .catch((error: AxiosError<Error>) => {\n                throw error;\n            });\n    }\n\n    /**\n     * Handle logout request\n     */\n    public userLogout() {\n        return commonAPI.post(this.config.apiServiceURL.logout)\n            .then((res) => {\n                return commonAPI.success(res);\n            })\n            .catch((error: AxiosError<Error>) => {\n                throw error;\n            });\n    }\n\n    /**\n     * Handle register a new user\n     * @param user user's object\n     */\n    public userRegister(user: User): Promise<JwtResponse> {\n        return commonAPI.post<number, User, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.register, user)\n            .then((res) => {\n                return commonAPI.success(res);\n            })\n            .catch((error: AxiosError<Error>) => {\n                throw error;\n            });\n    }\n}\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\n\nimport { logoutUser } from '../../redux/store/user/actions';\nimport { AppState } from '../../redux/store';\nimport { User } from '../../class/user';\nimport { UserServiceApi } from '../../service/User.service';\n\ntype ToolbarProps = {\n    logoutUser: typeof logoutUser,\n    user: User\n}\nclass Toolbar extends React.Component<ToolbarProps, {}> {\n\tuserService: UserServiceApi;\t//user service\n    constructor(props: ToolbarProps) {\n        super(props);\n        \n\t\tthis.userService = new UserServiceApi();\n\n        this.logout = this.logout.bind(this);\n        this.renderBookingManagement = this.renderBookingManagement.bind(this);\n        this.renderProfileLink = this.renderProfileLink.bind(this);\n    }\n\n    /**\n     * Handle logout action\n     */\n    logout() {\n        this.userService.userLogout().then((res) => {\n            this.props.logoutUser();\n        });\n    }\n\n    /**\n     * Render booking manu\n     */\n    renderBookingManagement() {\n        let result = [];\n        if (this.props.user._id !== undefined) {\n            result.push(\n                (<Nav.Link key=\"bookings_nav_link\" as={Link} to=\"/bookings\">Bookings</Nav.Link>)\n            );\n        }\n        if(this.props.user.isAdmin){\n            result.push(\n                (<Nav.Link key=\"event_type_nav_link\" as={Link} to=\"/eventtypes\">Event Types</Nav.Link>)\n            );\n        }\n        return result;\n    }\n\n    /**\n     * Render profile menu\n     */\n    renderProfileLink() {\n        let result;\n        if (this.props.user._id != null && this.props.user._id !== '') {\n            result = (\n                <NavDropdown title={`${this.props.user.firstName} ${this.props.user.lastName}`} id=\"basic-nav-dropdown\">\n                    <NavDropdown.Item as={Link} to=\"/login\" onClick={this.logout}>Logout</NavDropdown.Item>\n                </NavDropdown>\n            );\n        }\n        else {\n            result = (\n                <Nav.Link as={Link} to=\"/login\">Login</Nav.Link>\n            );\n        }\n        return result;\n    }\n\n    render() {\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand as={Link} to=\"/bookings\">Fullerton Healthcare</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        {\n                            this.renderBookingManagement()\n                        }\n                        {\n                            this.renderProfileLink()\n                        }\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\nconst MapStatesToProps = (store: AppState) => {\n    return {\n        user: store.user.currentUser\n    }\n}\nconst MapDispatchToProps = {\n    logoutUser\n}\n\nexport default connect(MapStatesToProps, MapDispatchToProps)(Toolbar);","export class User {\n    constructor(obj?: any){\n        this._id        = (obj && obj._id)?         obj._id : null;\n        this.email      = (obj && obj.email)?       obj.email : '';\n        this.password   = (obj && obj.password)?    obj.password : '';\n        this.firstName  = (obj && obj.firstName)?   obj.firstName : '';\n        this.lastName   = (obj && obj.lastName)?    obj.lastName : '';\n        this.role       = (obj && obj.role)?        obj.role : '';\n        this.token      = (obj && obj.token)?       obj.token : '';\n        this.isAdmin    = false;\n        this.isHr       = false;\n    }\n    _id: any;\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: any;\n    token: string;\n    isAdmin: boolean;\n    isHr: boolean;\n}","import { User } from \"./user\";\nexport class Booking {\n    constructor(obj?:any){\n        this._id = obj ? obj._id : null;\n        this.status = obj ? obj.status : null;\n        this.eventType = obj ? obj.eventType : null;\n        this.location = obj ? obj.location : null;\n        this.proposedDateTime1 = obj ? obj.proposedDateTime1 : null;\n        this.proposedDateTime2 = obj ? obj.proposedDateTime2 : null;\n        this.proposedDateTime3 = obj ? obj.proposedDateTime3 : null;\n        this.choosenDateTime = obj ? obj.choosenDateTime : null;\n        this.reasonForRejection = obj ? obj.reasonForRejection : null;\n\n        this.createdBy =  obj ? obj.createdBy : new User();\n        this.createdDate =  obj ? obj.createdDate: new Date();\n        this.updatedBy =  obj ? obj.updatedBy : new User();\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\n    }\n    _id:any;\n    status: any;\n    eventType: any;\n    location: string;\n    proposedDateTime1: Date;\n    proposedDateTime2: Date;\n    proposedDateTime3: Date;\n    choosenDateTime: Date;\n    reasonForRejection: string;\n\n    createdBy: User;\n    createdDate: Date;\n    updatedBy: User;\n    updatedDate: Date;\n}","\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { Config } from \"../configuration/config\";\nimport { Booking } from \"../class/booking\";\nimport { commonAPI } from \"./common-api.service\";\nimport { apiConfig } from \"../configuration/api.config\";\nimport { Validator, QuestionBase, TextboxQuestion, DateTimeQuestion, FormConfig, DynamicFormStates, ReferenceQuestion } from \"../share-components/DynamicForm\";\n\nexport class BookingService {\n    configs: Config;\n    axiosConfig: AxiosRequestConfig;\n    formConfig: FormConfig;\n    constructor() {\n        this.configs = new Config();\n        this.axiosConfig = apiConfig;\n        this.formConfig = new FormConfig();\n\n        this.getAllData = this.getAllData.bind(this);\n        this.getById = this.getById.bind(this);\n        this.getByUser = this.getByUser.bind(this);\n        this.createNew = this.createNew.bind(this);\n        this.update = this.update.bind(this);\n        this.deleteRecords = this.deleteRecords.bind(this);\n        this.getQuestion = this.getQuestion.bind(this);\n    }\n\n    /**\n     * Get all data\n     */\n    public async getAllData(): Promise<Booking[]> {\n        try {\n            const res: AxiosResponse<Booking[]> = await commonAPI.get(this.configs.apiServiceURL.bookings);\n            return commonAPI.success(res);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * get data by id\n     * @param id id\n     */\n    public async getById(id: any): Promise<Booking> {\n        try {\n            const res: AxiosResponse<Booking> = await commonAPI.get(`${this.configs.apiServiceURL.bookings}/${id}`);\n            return commonAPI.success(res);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Get data by user\n     * @param id User's id\n     */\n    public async getByUser(id: any): Promise<Booking[]> {\n        try {\n            const res: AxiosResponse<Booking[]> = await commonAPI.get(`${this.configs.apiServiceURL.bookings}/user/${id}`);\n            return commonAPI.success(res);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Create new booking\n     * @param obj booking object\n     */\n    public async createNew(obj: Booking): Promise<any> {\n        try{\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.bookings}`, obj);\n            return commonAPI.success(res);\n        }\n        catch(e){\n            throw e;\n        }\n    }\n\n    /**\n     * Update booking\n     * @param obj booking's object\n     */\n    public async update(obj: Booking): Promise<any> {\n        try{\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.bookings}`, obj);\n            return commonAPI.success(res);\n        }\n        catch(e){\n            throw e;\n        }\n    }\n\n    /**\n     * Delete bookings\n     * @param objs booking list\n     */\n    public async deleteRecords(objs: Booking[]) : Promise<any> {\n        try{\n            this.axiosConfig.data = objs;\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.bookings}`, this.axiosConfig);\n            return commonAPI.success(res);\n        }\n        catch(e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Generate Booking questions\n     * @param record Booking object\n     */\n    public getQuestion(record: Booking) {\n        let questions: QuestionBase<any>[] = [];\n\n        // Add location question\n        let validators: { [s: string]: Validator<any>; } = {};\n        validators = {}\n        validators[this.formConfig.formValidators.require] = {\n            value: true,\n            errorMessage: 'Location is required.'\n        };\n        questions.push(new TextboxQuestion({\n            key: 'location',\n            label: 'Location',\n            value: record.location,\n            validators: validators,\n            type: this.formConfig.inputTypeDef.text,\n            order: 100\n        }));\n\n        //Add type of event question\n        questions.push(new ReferenceQuestion({\n            key: 'eventType',\n            label: 'Event Type',\n            value: record.eventType,\n            serverUrl: this.configs.apiServiceURL.eventTypes,\n            displayField: 'name',\n            listFields: ['name'],\n            searchBar: true,\n            order: 200\n        }));\n\n        // Add proposed date 1\n        questions.push(new DateTimeQuestion({\n            key: 'proposedDateTime1',\n            label: 'Proposed Date Time 1',\n            value: record.proposedDateTime1 ? new Date(record.proposedDateTime1) : undefined,\n            order: 400\n        }));\n\n        // Add proposed date 2\n        questions.push(new DateTimeQuestion({\n            key: 'proposedDateTime2',\n            label: 'Proposed Date Time 2',\n            value: record.proposedDateTime2 ? new Date(record.proposedDateTime2) : undefined,\n            order: 500\n        }));\n\n        // Add proposed date 3\n        questions.push(new DateTimeQuestion({\n            key: 'proposedDateTime3',\n            label: 'Proposed Date Time 3',\n            value: record.proposedDateTime3 ? new Date(record.proposedDateTime3) : undefined,\n            order: 600\n        }));\n\n        return questions.sort((a, b) => a.order - b.order);\n    }\n\n     /**\n      * Convert object from dynamic form to Booking\n      * @param form Dynamic form value\n      * @param booking Current value\n      */\n    convertFormToObject(form: DynamicFormStates, booking: Booking): Booking {\n        //convert form to booking object\n        let formRecord = new Booking(form.listFields);\n        //those belong fields does not exist in form => add manually\n        formRecord._id = booking._id;\n        formRecord.status = booking.status;\n        formRecord.choosenDateTime = booking.choosenDateTime;\n        formRecord.reasonForRejection = booking.reasonForRejection;\n        formRecord.createdBy = booking.createdBy;\n        formRecord.createdDate = booking.createdDate;\n        formRecord.updatedBy = booking.updatedBy;\n        formRecord.updatedDate = booking.updatedDate;\n        return formRecord;\n    }\n}","export class CommonService {\n\n    /**\n     * convert date type to string base on format\n     * @param date date\n     * @param format format ex: yyyyMMdd or yyyyMMdd HHmmmSS ..etc\n     */\n    convertDateToStringByFormat(date: Date, format: string): string {\n        let result: string = '';\n        var year = date.getFullYear();\n        var month = date.getMonth() + 1;\n        var day = date.getDate();\n        var hour = date.getHours();\n        var minute = date.getMinutes();\n        var second = date.getSeconds();\n        result = format.replace('yyyy', year.toString())\n            .replace('MM', this.fixedFormatTwoDigit(month))\n            .replace('dd', this.fixedFormatTwoDigit(day))\n            .replace('HH', this.fixedFormatTwoDigit(hour))\n            .replace('mmm', this.fixedFormatTwoDigit(minute))\n            .replace('SS', this.fixedFormatTwoDigit(second));\n        return result;\n    }\n\n    /**\n     * return the number with two fixed digits\n     * @param number source number\n     */\n    fixedFormatTwoDigit(number: number): string {\n        let result: string = '';\n        result = number < 10 ? ('0' + number.toString()) : number.toString();\n        return result;\n    }\n}","import { UpdateRequestsAction, UPDATE_REQUEST, UPDATE_ALERT } from \"./types\";\n\nexport function updateRequest(noRequests: number): UpdateRequestsAction {\n\treturn {\n\t\ttype: UPDATE_REQUEST,\n\t\tpayload: noRequests\n\t};\n}\n\nexport function updateAlert(alert: any) {\n\treturn {\n\t\ttype: UPDATE_ALERT,\n\t\tpayload: alert\n\t}\n}\n\n","export const UPDATE_REQUEST = \"UPDATE_REQUEST\";\nexport const UPDATE_ALERT = \"UPDATE_ALERT\";\n\nexport interface UpdateRequestsAction {\n  type: typeof UPDATE_REQUEST;\n  payload: number;\n}\n\ninterface UpdateAlertsAction {\n  type: typeof UPDATE_ALERT;\n  payload: any;\n}\n\nexport type RequestActionTypes = UpdateRequestsAction | UpdateAlertsAction;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { withRouter, Redirect, RouteComponentProps } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport { Config } from '../../configuration/config';\nimport { BookingService } from '../../service/Booking.service';\nimport { Booking } from \"../../class/booking\";\nimport { User } from \"../../class/user\";\nimport { FormConfig, DynamicFormStates, DynamicForm, TextAreaQuestion, Validator, QuestionBase, RadioButtonQuestion } from '../../share-components/DynamicForm';\nimport { KeyValue } from '../../class/common/keyValue';\nimport { ReactModal, ModalActionType } from '../../share-components/Modal/Modal';\nimport { CommonService } from '../../service/common.service';\nimport { AppState } from '../../redux/store';\nimport { updateAlert } from '../../redux/store/request/actions';\n\nconst ContainerDiv = styled.div`\n    width: 80%;\n    margin: auto;\n    padding-top: 50px;\n    padding-bottom: 100px;\n    font-size: small;\n    font-weight: 400;\n`;\nconst UiActionContainerDiv = styled.div`\n    width: 100%;\n    display: inline-block;\n`;\n\ninterface BookingProps extends RouteComponentProps<any>{\n    user: User,\n    updateAlert: typeof updateAlert\n}\n\ninterface BookingStates {\n    booking: Booking,\n    modalConfig: any,\n    redirectToBookingList: boolean\n}\n\nconst initialBookingStates: BookingStates = {\n    booking: new Booking(),\n    modalConfig: {},\n    redirectToBookingList: false\n}\n\nclass BookingComponent extends React.Component<BookingProps, BookingStates> {\n    config: Config;\n    bookingService: BookingService;\n    commonService: CommonService;\n    formConfig: FormConfig;\n    constructor(props: BookingProps) {\n        super(props);\n\n        this.state = initialBookingStates;\n        this.formConfig = new FormConfig();\n        this.config = new Config();\n        this.bookingService = new BookingService();\n        this.commonService = new CommonService();\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleApprove = this.handleApprove.bind(this);\n        this.handleReject = this.handleReject.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.renderUiAction = this.renderUiAction.bind(this);\n        this.redirectToBookingList = this.redirectToBookingList.bind(this);\n        this.handleBookingModalAction = this.handleBookingModalAction.bind(this);\n    }\n\n    componentDidMount() {\n        //get booking's detail\n        let bookingId = this.props.match.params['bookingId'];\n        this.bookingService.getById(bookingId).then((booking)=> {\n            this.setState({booking});\n        });\n    }\n\n    /**\n     * Handle submit Booking\n     * @param form Dynamic form state\n     */\n    handleSubmit(form: DynamicFormStates) {\n        //get Booking object from dynamic form\n        let booking = this.bookingService.convertFormToObject(form, this.state.booking);\n        //submit change and reload page\n        this.bookingService.update(booking).then((result) => {\n            window.location.reload();\n        });\n    }\n\n    /**\n     * Handle approve Booking\n     */\n    handleApprove() {\n        //Create questions show on modal\n        let questions: QuestionBase<any>[] = [];\n        //Add approve date time question\n        let validators: { [s: string]: Validator<any>; } = {};\n        validators = {}\n        validators[this.formConfig.formValidators.require] = {\n            value: true,\n            errorMessage: 'Approve date is required.'\n        };\n\n        let options: KeyValue[] = [];\n        //Add proposed date time 1 to options\n        if (this.state.booking.proposedDateTime1) {\n            let accessor = new Date(this.state.booking.proposedDateTime1);\n            options.push(new KeyValue({\n                key: 0,\n                value: this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n            }));\n        }\n        //Add proposed date time 2 to options\n        if (this.state.booking.proposedDateTime2) {\n            let accessor = new Date(this.state.booking.proposedDateTime2);\n            options.push(new KeyValue({\n                key: 1,\n                value: this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n            }));\n        }\n        //Add proposed date time 3 to options\n        if (this.state.booking.proposedDateTime3) {\n            let accessor = new Date(this.state.booking.proposedDateTime3);\n            options.push(new KeyValue({\n                key: 2,\n                value: this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n            }));\n        }\n        questions.push(new RadioButtonQuestion({\n            key: 'choosenDateTime',\n            label: 'Approve date',\n            value: '',\n            options: options,\n            validators: validators,\n            order: 100\n        }));\n        //Show modal\n        this.setState({\n            modalConfig: {\n                show: true,\n                modalTitle: 'Approve confirmation',\n                action: 'approve',\n                questions: questions\n            }\n        })\n    }\n\n    /**\n     * Handle reject Booking\n     */\n    handleReject() {\n        //Create questions show on modal\n        let questions: QuestionBase<any>[] = [];\n        // Add rejection reason field\n        let validators: { [s: string]: Validator<any>; } = {};\n        validators = {}\n        validators[this.formConfig.formValidators.require] = {\n            value: true,\n            errorMessage: 'Rejection reason is required.'\n        };\n        questions.push(new TextAreaQuestion({\n            key: 'reasonForRejection',\n            label: 'Rejection reason',\n            value: '',\n            validators: validators,\n            rows: 5,\n            order: 100\n        }));\n        //Show modal\n        this.setState({\n            modalConfig: {\n                show: true,\n                modalTitle: 'Reject confirmation',\n                action: 'reject',\n                questions: questions\n            }\n        });\n    }\n\n    /**\n     * Handle popup confirmation\n     */\n    handleBookingModalAction(action: any, form: DynamicFormStates) {\n        //Hide popup\n        this.setState({\n            modalConfig: {}\n        });\n        //handle create booking when user confirm\n        if (action === ModalActionType.OK) {\n            let booking = this.state.booking;\n            switch (this.state.modalConfig.action) {\n                case 'reject':\n                    //update status = reject and rejection reason\n                    booking.status = this.config.bookingStatus.rejected;\n                    booking.reasonForRejection = form.listFields.reasonForRejection;\n                    break;\n                case 'approve':\n                    //Update status = approved and chosen proposed date time\n                    booking.status = this.config.bookingStatus.approved;\n                    let proposedDates = [\n                        this.state.booking.proposedDateTime1,\n                        this.state.booking.proposedDateTime2,\n                        this.state.booking.proposedDateTime3\n                    ];\n                    booking.choosenDateTime = proposedDates[form.listFields.choosenDateTime.key];\n                    break;\n                default:\n                    break;\n            }\n            //update booking and reload the page\n            this.bookingService.update(booking).then((result) => {\n                window.location.reload();\n            });\n        }\n    }\n\n    /**\n     * Handle cancel Booking\n     */\n    handleCancel() {\n        if (window.confirm(\"Do you want to delete this record?\")) {\n            //handle delete record after confirming\n            this.bookingService.deleteRecords([this.state.booking]).then((result) => {\n                //show success message\n                this.props.updateAlert({\n\t\t\t\t\tshow: true,\n\t\t\t\t\tvalue: this.config.commonMessage.deleteSuccess,\n\t\t\t\t\tvariant: this.config.alertVariants.success\n\t\t\t\t});\n                //Redirect to dashboard\n                this.setState({\n                    redirectToBookingList: true\n                });\n            });\n        }\n    }\n\n    /**\n     * Render ui action [Approve, Reject, Cancel]\n     */\n    renderUiAction() {\n        let result;\n        //UI Actions only show when status is prending preview [Cancel, Approve, Reject]\n        if (this.state.booking.status && this.state.booking.status.key === this.config.bookingStatus.pendingReview.key) {\n            //User is CompanyHR => show [Cancel] button\n            if (this.props.user.isHr) {\n                result = (\n                    <UiActionContainerDiv>\n                        <Button className=\"float-right\" \n                            onClick={this.handleCancel} \n                            variant=\"contained\" \n                            color=\"primary\">\n                            Cancel\n                        </Button>\n                    </UiActionContainerDiv>\n                )\n            }\n            else if (this.props.user.isAdmin) {\n                //User is admin => [show Approve, Reject] button\n                result = (\n                    <UiActionContainerDiv>\n                        <Button className=\"float-right\" \n                            onClick={this.handleApprove} \n                            variant=\"contained\" \n                            color=\"primary\">\n                            Approve\n                        </Button>\n                        <Button className=\"float-right\" \n                            onClick={this.handleReject} \n                            style={{ marginRight: 10 }} \n                            variant=\"contained\" \n                            color=\"primary\">\n                            Reject\n                        </Button>\n                    </UiActionContainerDiv>\n                )\n            }\n        }\n        return result;\n    }\n\n    /**\n     * React-router redirect to create new page\n     */\n    redirectToBookingList() {\n        if (this.state.redirectToBookingList) {\n            return (\n                <Redirect push={false} to={{\n                    pathname: '/bookings',\n                    state: { isNeedReload: 'true' }\n                }}></Redirect>\n            )\n        }\n    }\n\n    render() {\n        //Get questions (fields) of booking that show on form to get infor from user\n        let questions = this.bookingService.getQuestion(this.state.booking);\n        return (\n            <ContainerDiv>\n                {\n                    this.redirectToBookingList()\n                }\n                {\n                    this.renderUiAction()\n                }\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\n                {\n                    this.state.modalConfig.show ?\n                        (\n                            <ReactModal show={this.state.modalConfig.show}\n                                modalTitle={this.state.modalConfig.modalTitle}\n                                questions={this.state.modalConfig.questions}\n                                onActionFire={this.handleBookingModalAction} />\n                        ) : ('')\n                }\n            </ContainerDiv>\n        );\n    }\n}\n\nconst MapStatesToProps = (store: AppState) => {\n    return {\n        user: store.user.currentUser\n    };\n}\n\nconst MapDispatchToProps = {\n    updateAlert\n};\n\nexport default withRouter(connect(MapStatesToProps, MapDispatchToProps)(BookingComponent));","import React from 'react';\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter';\n\n// Define a default UI for filtering\nexport function DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            value={filterValue || ''}\n            onClick={e=> e.stopPropagation()}\n            onChange={e => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n    // Calculate the options for filtering\n    // using the preFilteredRows\n    const options = React.useMemo(() => {\n        const options = new Set()\n        preFilteredRows.forEach(row => {\n            if(row.values[id] !== ''){\n                options.add(row.values[id])\n            }\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    // Render a multi-select box\n    return (\n        <select\n            value={filterValue}\n            onClick={e=> e.stopPropagation()}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n        >\n            <option value=\"\">All</option>\n            {options.map((option, i) => (\n                <option key={i} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nexport function SliderColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n    // Calculate the min and max\n    // using the preFilteredRows\n\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach(row => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <>\n            <input\n                type=\"range\"\n                min={min}\n                max={max}\n                value={filterValue || min}\n                onChange={e => {\n                    setFilter(parseInt(e.target.value, 10))\n                }}\n            />\n            <button onClick={() => setFilter(undefined)}>Off</button>\n        </>\n    )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nexport function NumberRangeColumnFilter({\n    column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach(row => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n            }}\n        >\n            <input\n                value={filterValue[0] || ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n                }}\n                placeholder={`Min (${min})`}\n                style={{\n                    width: '70px',\n                    marginRight: '0.5rem',\n                }}\n            />\n      to\n            <input\n                value={filterValue[1] || ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n                }}\n                placeholder={`Max (${max})`}\n                style={{\n                    width: '70px',\n                    marginLeft: '0.5rem',\n                }}\n            />\n        </div>\n    )\n}\n\nexport function fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Define a custom filter filter function!\nexport function filterGreaterThan(rows, id, filterValue) {\n    return rows.filter(row => {\n        const rowValue = row.values[id]\n        return rowValue >= filterValue\n    })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox'\n//Add selection\nexport const IndeterminateCheckbox = React.forwardRef(\n    ({ indeterminate, ...rest }, ref) => {\n        const defaultRef = React.useRef();\n        const resolvedRef = ref || defaultRef;\n\n        React.useEffect(() => {\n            resolvedRef.current.indeterminate = indeterminate;\n        }, [resolvedRef, indeterminate]);\n\n        return (\n            <>\n                <Checkbox type=\"checkbox\" ref={resolvedRef} {...rest} />\n            </>\n        );\n    }\n);","import React from 'react'\n\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\nimport IconButton from '@material-ui/core/IconButton'\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\nimport LastPageIcon from '@material-ui/icons/LastPage'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}))\n\nconst TablePaginationActions = props => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const { count, page, rowsPerPage, onChangePage } = props\n\n  const handleFirstPageButtonClick = event => {\n    onChangePage(event, 0)\n  }\n\n  const handleBackButtonClick = event => {\n    onChangePage(event, page - 1)\n  }\n\n  const handleNextButtonClick = event => {\n    onChangePage(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = event => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  )\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n}\n\nexport default TablePaginationActions\n","import React from 'react'\n\nimport InputBase from '@material-ui/core/InputBase'\nimport { fade, makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  },\n}))\n\nconst GlobalFilter = ({\n  preGlobalFilteredRows,\n  globalFilter = '',\n  setGlobalFilter,\n}) => {\n  const classes = useStyles()\n  const count = preGlobalFilteredRows.length\n\n  // Global filter only works with pagination from the first page.\n  // This may not be a problem for server side pagination when\n  // only the current page is downloaded.\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        value={globalFilter || ''}\n        onChange={e => {\n          setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n        }}\n        placeholder={`${count} records...`}\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ 'aria-label': 'search' }}\n      />\n    </div>\n  )\n}\n\nGlobalFilter.propTypes = {\n  preGlobalFilteredRows: PropTypes.array.isRequired,\n  setGlobalFilter: PropTypes.func.isRequired,\n}\n\nexport default GlobalFilter\n","import React from 'react'\n\nimport clsx from 'clsx'\nimport {\n\tSelect, IconButton, Toolbar, Typography,\n\tTooltip, FormControl, InputLabel, Input, MenuItem,\n\tCheckbox, ListItemText\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport GlobalFilter from '../Filter/GlobalFilter';\n\nconst useToolbarStyles = makeStyles(theme => ({\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120,\n\t\tmaxWidth: 300,\n\t},\n\troot: {\n\t\tpaddingLeft: theme.spacing(2),\n\t\tpaddingRight: theme.spacing(1),\n\t},\n\thighlight:\n\t\ttheme.palette.type === 'light'\n\t\t\t? {\n\t\t\t\tcolor: theme.palette.secondary.main,\n\t\t\t\tbackgroundColor: lighten(theme.palette.secondary.light, 0.85),\n\t\t\t}\n\t\t\t: {\n\t\t\t\tcolor: theme.palette.text.primary,\n\t\t\t\tbackgroundColor: theme.palette.secondary.dark,\n\t\t\t},\n\ttitle: {\n\t\tflex: '1 1 100%',\n\t},\n}))\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n\tPaperProps: {\n\t\tstyle: {\n\t\t\tmaxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n\t\t\twidth: 250,\n\t\t},\n\t},\n};\n\nconst TableToolbar = props => {\n\tconst classes = useToolbarStyles()\n\tconst {\n\t\tnumSelected,\n\t\tdeleteRecordHandler,\n\t\taddRecordHandler,\n\t\tpreGlobalFilteredRows,\n\t\tsetGlobalFilter,\n\t\tglobalFilter = '',\n\t\tTableName = '',\n\t\tallColumns,\n\t\tshowAddRecord\n\t} = props\n\treturn (\n\t\t<Toolbar\n\t\t\tclassName={clsx(classes.root, {\n\t\t\t\t[classes.highlight]: numSelected > 0,\n\t\t\t})}\n\t\t>\n\t\t\t{\n\t\t\t\tshowAddRecord ?\n\t\t\t\t\t(\n\t\t\t\t\t\t<Tooltip title=\"Add\">\n\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={addRecordHandler}>\n\t\t\t\t\t\t\t\t<AddIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t)\n\t\t\t}\n\n\t\t\t{numSelected > 0 ? (\n\t\t\t\t<Typography\n\t\t\t\t\tclassName={classes.title}\n\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\tvariant=\"subtitle1\"\n\t\t\t\t>\n\t\t\t\t\t{numSelected} selected\n\t\t\t\t</Typography>\n\t\t\t) : (\n\t\t\t\t\t<Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTableName\n\t\t\t\t\t\t}\n\t\t\t\t\t</Typography>\n\t\t\t\t)}\n\n\t\t\t{numSelected > 0 ? (\n\t\t\t\t<Tooltip title=\"Delete\">\n\t\t\t\t\t<IconButton aria-label=\"delete\" onClick={deleteRecordHandler}>\n\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Tooltip>\n\t\t\t) : (\n\t\t\t\t\t<GlobalFilter\n\t\t\t\t\t\tpreGlobalFilteredRows={preGlobalFilteredRows}\n\t\t\t\t\t\tglobalFilter={globalFilter}\n\t\t\t\t\t\tsetGlobalFilter={setGlobalFilter}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t<InputLabel id=\"columns-visible-label\">Columns</InputLabel>\n\t\t\t\t<Select\n\t\t\t\t\tlabelId=\"columns-visible-label\"\n\t\t\t\t\tid=\"columns-visible-select\"\n\t\t\t\t\tmultiple\n\t\t\t\t\tvalue={[\"Select columns\"]}\n\t\t\t\t\tinput={<Input />}\n\t\t\t\t\trenderValue={(selected) => selected.join(', ')}\n\t\t\t\t\tMenuProps={MenuProps}\n\t\t\t\t>\n\t\t\t\t\t{allColumns.map(column => (\n\t\t\t\t\t\t<MenuItem key={column.id} value={column.id}>\n\t\t\t\t\t\t\t<Checkbox {...column.getToggleHiddenProps()} />\n\t\t\t\t\t\t\t<ListItemText primary={column.id} />\n\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t))}\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</Toolbar>\n\t)\n}\n\nTableToolbar.propTypes = {\n\tnumSelected: PropTypes.number.isRequired,\n\taddRecordHandler: PropTypes.func.isRequired,\n\tdeleteRecordHandler: PropTypes.func.isRequired,\n\tsetGlobalFilter: PropTypes.func.isRequired,\n\tpreGlobalFilteredRows: PropTypes.array.isRequired,\n\tallColumns: PropTypes.array.isRequired\n}\n\nexport default TableToolbar\n","import React from 'react';\nimport {\n    useTable,\n    usePagination,\n    useFilters,\n    useGlobalFilter,\n    useRowSelect,\n    useSortBy\n} from \"react-table\";\nimport * as filter from './Filter/Filter';\nimport { IndeterminateCheckbox } from './Selection/RowSelection';\nimport PropTypes from 'prop-types';\nimport { TableContainer, TableHead, TableRow, TableCell, TableBody, TableFooter, TablePagination, TableSortLabel } from '@material-ui/core';\nimport MaUTable from '@material-ui/core/Table'\nimport TablePaginationActions from './Pagination/TablePaginationActions';\nimport TableToolbar from './Toolbar/TableToolbar';\nimport './Table.scss';\n\n// Our table component\nexport function Table({\n    columns,\n    data,\n    fetchData,\n    pageCount: controlledPageCount,\n    skipPageReset = true,\n    deleteRecordHandler = (selectedId) => { },\n    addRecordHandler = () => { },\n    TableName = '',\n    showSelection = true,\n    showAddRecord = true\n}) {\n    const filterTypes = React.useMemo(\n        () => ({\n            // Add a new fuzzyTextFilterFn filter type.\n            fuzzyText: filter.fuzzyTextFilterFn,\n            // Or, override the default text filter to use\n            // \"startWith\"\n            text: (rows, id, filterValue) => {\n                return rows.filter(row => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                            .toLowerCase()\n                            .startsWith(String(filterValue).toLowerCase())\n                        : true\n                })\n            },\n        }),\n        []\n    )\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: filter.DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        gotoPage,\n        setPageSize,\n        allColumns,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n        state: { pageIndex, pageSize, selectedRowIds, globalFilter },\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn, // Be sure to pass the defaultColumn option\n            filterTypes,\n            autoResetPage: !skipPageReset,  //reset page after change (filter)\n            pageCount: controlledPageCount,\n            initialState: {\n                hiddenColumns: ['createdBy', 'createdDate', 'updatedBy', 'updatedDate']\n            }\n            // manualPagination: true, // Tell the usePagination\n        },\n        useGlobalFilter,\n        useFilters,\n        useSortBy,\n        usePagination,\n        useRowSelect,\n        hooks => {\n            hooks.allColumns.push(columns => {\n                if (showSelection) {\n                    columns.unshift({\n                        id: \"selection\",\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <div style={{ textAlign: \"center\" }}>\n                                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }) => (\n                            <div style={{ textAlign: \"center\" }}>\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                            </div>\n                        )\n                    });\n                }\n                return columns\n            });\n        }\n    )\n\n    // Listen for changes in pagination and use the state to fetch our new data\n    React.useEffect(() => {\n        fetchData({ pageIndex, pageSize })\n    }, [fetchData, pageIndex, pageSize])\n\n    //Change row per page in pagination\n    const handleChangeRowsPerPage = event => {\n        setPageSize(Number(event.target.value))\n    }\n    //Change the selected page\n    const handleChangePage = (event, newPage) => {\n        gotoPage(newPage)\n    }\n    //pre-do to get selected record\n    const preDeleteRecordHandler = () => {\n        //get index of selected record\n        let selectedRowIndex = Object.keys(selectedRowIds).map(x => parseInt(x, 10));\n        //filter record\n        let selectedRecord = data.filter((_, i) => {\n            return selectedRowIndex.includes(i)\n        });\n        //send the record to handle page\n        deleteRecordHandler(selectedRecord);\n    }\n\n    return (\n        <TableContainer className=\"ReactTable\">\n            <TableToolbar\n                showAddRecord={showAddRecord}\n                numSelected={Object.keys(selectedRowIds).length}\n                deleteRecordHandler={preDeleteRecordHandler}\n                addRecordHandler={addRecordHandler}\n                TableName={TableName}\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                setGlobalFilter={setGlobalFilter}\n                globalFilter={globalFilter}\n                allColumns={allColumns}\n            />\n            <MaUTable {...getTableProps()} className=\"react-custom-table\">\n                <TableHead>\n                    {headerGroups.map(headerGroup => (\n                        <TableRow {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <TableCell\n                                    {...(column.id === 'selection'\n                                        ? column.getHeaderProps()\n                                        : column.getHeaderProps(column.getSortByToggleProps()))}\n                                >\n                                    {column.render('Header')}\n                                    {column.id !== 'selection' ? (\n                                        <TableSortLabel\n                                            active={column.isSorted}\n                                            // react-table has a unsorted state which is not treated here\n                                            direction={column.isSortedDesc ? 'desc' : 'asc'}\n                                        />\n                                    ) : null}\n                                    <div className=\"table-header-filter\">\n                                        {(column.canFilter && !column.columnDisableGlobalFilter) ? column.render('Filter') : null}\n                                    </div>\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <TableRow {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return (\n                                        <TableCell {...cell.getCellProps()}>\n                                            {cell.render('Cell')}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n                <TableFooter className=\"pagination\">\n                    <TableRow>\n                        <TablePagination\n                            // rowsPerPageOptions={[\n                            //     5,\n                            //     10,\n                            //     25,\n                            //     50,\n                            //     100,\n                            //     { label: 'All', value: controlledPageCount },\n                            // ]}\n                            colSpan={10000}\n                            count={controlledPageCount}\n                            rowsPerPage={pageSize}\n                            page={pageIndex}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </MaUTable>\n        </TableContainer>\n    )\n}\n\nTable.propTypes = {\n    columns: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired,\n    fetchData: PropTypes.func.isRequired,\n    pageCount: PropTypes.number.isRequired,\n    deleteRecordHandler: PropTypes.func.isRequired\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { Link, Switch, Route, RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { Booking } from '../../../class/booking';\nimport BookingComponent from '../../../components/Booking/Booking';\nimport { Config } from '../../../configuration/config';\nimport { AppState } from '../../store';\nimport { Table } from '../../../share-components/Table/Table';\nimport { BookingService } from '../../../service/Booking.service';\nimport { SelectColumnFilter } from '../../../share-components/Table/Filter/Filter';\nimport { CommonService } from '../../../service/common.service';\nimport { ReactModal, ModalActionType } from '../../../share-components/Modal/Modal';\nimport { DynamicFormStates } from '../../../share-components/DynamicForm';\n\ninterface RouteLocation {\n    isNeedReload?: string;\n}\n\ninterface BookingContainerProps extends RouteComponentProps<{}, {}, RouteLocation> {\n    user: any\n}\n\ninterface BookingContainerStates {\n    allBooking: Booking[],\n    bookingList: Booking[],\n    isLoading: boolean,\n    modalConfig: any\n}\n\nconst ContainerDiv = styled.div`\n    min-height: calc(100vh - 80px);\n`;\n\nclass BookingContainer extends Component<BookingContainerProps, BookingContainerStates> {\n    bookingService: BookingService;\n    commonService: CommonService;\n    config: Config;\n    constructor(props: BookingContainerProps) {\n        super(props);\n\n        this.state = {\n            allBooking: [],\n            bookingList: [],\n            isLoading: false,\n            modalConfig: {}\n        }\n        this.bookingService = new BookingService();\n        this.commonService = new CommonService();\n        this.config = new Config();\n\n        this.deleteBookingHandler = this.deleteBookingHandler.bind(this);\n        this.addBookingHandler = this.addBookingHandler.bind(this);\n        this.handleCreateBookingAction = this.handleCreateBookingAction.bind(this);\n    }\n\n    async componentDidMount() {\n        let bookings = this.state.allBooking;\n        if (this.props.user.currentUser.isHr) {\n            //login user = company HR => get only bookings created by he/she\n            bookings = await this.bookingService.getByUser(this.props.user.currentUser._id);\n        }\n        else if (this.props.user.currentUser.isAdmin) {\n            //login user = admin => get all bookings\n            bookings = await this.bookingService.getAllData();\n        }\n\n        this.setState({\n            allBooking: bookings,\n            isLoading: false\n        });\n    }\n\n    componentDidUpdate() {\n        if (this.props.location.state && this.props.location.state.isNeedReload === 'true') {\n            //reload page when isloading = true\n            window.location.reload();\n        }\n    }\n\n    /**\n     * Handle delete Booking\n     * @param records deleted records\n     */\n    async deleteBookingHandler(records: Booking[]) {\n        //get all un-pending booking that be selected\n        let unPendingRecords = records.filter((value) => {\n            return value.status.key !== this.config.bookingStatus.pendingReview.key;\n        });\n\n        if (unPendingRecords.length > 0) {\n            //there are some record with status are not pending for review\n            alert('Could not delete [un-pending] booking');\n        }\n        else if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\n            //handle delete record after confirming\n            await this.bookingService.deleteRecords(records);\n            window.location.reload();\n        }\n    }\n\n    /**\n     * Handle create booking\n     */\n    async handleCreateBookingAction(action: any, form: DynamicFormStates) {\n        //Hide popup\n        this.setState({\n            modalConfig: {}\n        });\n        //handle create booking when user confirm\n        if (action === ModalActionType.OK) {\n            //get Booking object from dynamic form\n            let booking = this.bookingService.convertFormToObject(form, new Booking());\n            //set status = pending review after creating\n            booking.status = this.config.bookingStatus.pendingReview;\n            await this.bookingService.createNew(booking);\n            window.location.reload();\n        }\n    }\n\n    /**\n     * Handle business after user click (+) New button on list\n     */\n    addBookingHandler() {\n        //Get questions (fields) of booking that show on form to get infor from user\n        let questions = this.bookingService.getQuestion(new Booking());\n        //Set value for popup\n        this.setState({\n            modalConfig: {\n                show: true,\n                modalTitle: 'Create new booking',\n                questions: questions\n            }\n        });\n    }\n\n    render() {\n        //Define column that be displayed on table\n        const columns = [\n            {\n                Header: 'Location',\n                id: 'location',\n                accessor: 'location',\n                Cell: ({ row }: { row: any }) => (<Link to={`bookings/${row.original._id}`}>{row.original.location}</Link>)\n            },\n            {\n                Header: 'Event Type',\n                id: 'eventType',\n                Filter: SelectColumnFilter,\n                filter: 'includes',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.eventType) {\n                        result = row.eventType.name\n                    }\n                    return result;\n                },\n            },\n            {\n                Header: 'Status',\n                id: 'status',\n                Filter: SelectColumnFilter,\n                filter: 'includes',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.status) {\n                        result = row.status.value\n                    }\n                    return result;\n                },\n            },\n            {\n                Header: 'Proposed 1',\n                id: 'proposedDateTime1',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.proposedDateTime1) {\n                        let accessor = new Date(row.proposedDateTime1);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            },\n            {\n                Header: 'Proposed 2',\n                id: 'proposedDateTime2',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.proposedDateTime2) {\n                        let accessor = new Date(row.proposedDateTime2);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            },\n            {\n                Header: 'Proposed 3',\n                id: 'proposedDateTime3',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.proposedDateTime3) {\n                        let accessor = new Date(row.proposedDateTime3);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            },\n            {\n                Header: 'Approved Date',\n                id: 'choosenDateTime',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.choosenDateTime) {\n                        let accessor = new Date(row.choosenDateTime);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            },\n            {\n                Header: 'Reject reason',\n                id: 'reasonForRejection',\n                accessor: 'reasonForRejection'\n            },\n            {\n                Header: 'Created By',\n                id: 'createdBy',\n                accessor: (row: Booking) => row.createdBy ? `${row.createdBy.firstName} ${row.createdBy.lastName}` : ''\n            },\n            {\n                Header: 'Created',\n                id: 'createdDate',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.createdDate) {\n                        let accessor = new Date(row.createdDate);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            },\n            {\n                Header: 'Updated By',\n                id: 'updatedBy',\n                accessor: (row: Booking) => row.updatedBy ? `${row.updatedBy.firstName} ${row.updatedBy.lastName}` : ''\n            },\n            {\n                Header: 'Updated',\n                id: 'updatedDate',\n                accessor: (row: Booking) => {\n                    let result = '';\n                    if (row.updatedDate) {\n                        let accessor = new Date(row.updatedDate);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            }\n        ];\n        return (\n            <div>\n                {\n                    this.state.modalConfig.show ?\n                        (\n                            <ReactModal show={this.state.modalConfig.show}\n                                modalTitle={this.state.modalConfig.modalTitle}\n                                onActionFire={this.handleCreateBookingAction}\n                                questions={this.state.modalConfig.questions} />\n                        ) : ('')\n                }\n                <Switch>\n                    <Route exact path=\"/bookings\">\n                        <ContainerDiv>\n                            <Table columns={columns}\n                                data={this.state.allBooking}\n                                pageCount={this.state.allBooking.length}\n                                fetchData={()=>{}}\n                                deleteRecordHandler={this.deleteBookingHandler}\n                                showSelection={\n                                    //Admin could not delete bookings\n                                    this.props.user.currentUser.isHr\n                                }\n                                showAddRecord={\n                                    //Admin could not create new booking\n                                    this.props.user.currentUser.isHr\n                                }\n                                addRecordHandler={this.addBookingHandler}\n                                TableName=\"Bookings\"\n                            />\n                        </ContainerDiv>\n                    </Route>\n                    <Route path={`/bookings/:bookingId`}>\n                        <BookingComponent />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nconst MapStatesToProps = (store: AppState) => {\n    return {\n        user: store.user\n    };\n}\n\nconst MapDispatchToProps = {\n};\n\nexport default withRouter(connect(MapStatesToProps, MapDispatchToProps)(BookingContainer))","import * as React from 'react';\nimport {\n    Route,\n    Redirect,\n    RouteProps,\n    RouteComponentProps\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { AppState } from '../../redux/store';\nimport { User } from '../../class/user';\n\ninterface SecureRouteProps extends RouteProps {\n    user: User;\n    adminOnly?: boolean;\n}\n\nclass SecureRoute extends Route<SecureRouteProps> {\n    render() {\n        return (\n            <Route render={\n                (props: RouteComponentProps) => {\n                    //user haven't login yet => redirect to login page\n                    if (!this.props.user._id) {\n                        return <Redirect to='/login' />\n                    }\n                    else if(this.props.adminOnly && !this.props.user.isAdmin){\n                        return <Redirect to='/page401'/>\n                    }\n                    else {\n                        //if flag adminOnly = true => user must be admin to render the component\n                        if (this.props.component) {\n                            return React.createElement(this.props.component);\n                        }\n                        else if (this.props.render) {\n                            return this.props.render(props);\n                        }\n                    }\n                }\n            } />\n        );\n    }\n}\n\nconst MapStatesToProps = (appState: AppState) => {\n    return {\n        user: appState.user.currentUser\n    }\n}\nconst MapDispatchToProps = {\n\n}\nexport default connect(MapStatesToProps, MapDispatchToProps)(SecureRoute)","import { User } from \"./user\";\nexport class EventType {\n    constructor(obj?:any){\n        this._id = obj ? obj._id : null;\n        this.name = obj ? obj.name : null;\n\n        this.createdBy =  obj ? obj.createdBy : new User();\n        this.createdDate =  obj ? obj.createdDate: new Date();\n        this.updatedBy =  obj ? obj.updatedBy : new User();\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\n    }\n    _id:any;\n    name: string;\n\n    createdBy: User;\n    createdDate: Date;\n    updatedBy: User;\n    updatedDate: Date;\n}","\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { Config } from \"../configuration/config\";\nimport { EventType } from \"../class/eventType\";\nimport { commonAPI } from \"./common-api.service\";\nimport { apiConfig } from \"../configuration/api.config\";\nimport { Validator, QuestionBase, TextboxQuestion, FormConfig, DynamicFormStates } from \"../share-components/DynamicForm\";\n\nexport class EventTypeService {\n    configs: Config;\n    axiosConfig: AxiosRequestConfig;\n    formConfig: FormConfig;\n    constructor() {\n        this.configs = new Config();\n        this.axiosConfig = apiConfig;\n        this.formConfig = new FormConfig();\n\n        this.getAllData = this.getAllData.bind(this);\n        this.getById = this.getById.bind(this);\n        this.createNew = this.createNew.bind(this);\n        this.update = this.update.bind(this);\n        this.deleteRecords = this.deleteRecords.bind(this);\n        this.getQuestion = this.getQuestion.bind(this);\n    }\n\n    /**\n     * Get all data\n     */\n    public async getAllData(): Promise<EventType[]> {\n        try {\n            const res: AxiosResponse<EventType[]> = await commonAPI.get(this.configs.apiServiceURL.eventTypes);\n            return commonAPI.success(res);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * get data by id\n     * @param id id\n     */\n    public async getById(id: any): Promise<EventType> {\n        try {\n            const res: AxiosResponse<EventType> = await commonAPI.get(`${this.configs.apiServiceURL.eventTypes}/${id}`);\n            return commonAPI.success(res);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Get data by user\n     * @param id User's id\n     */\n    public async getByUser(id: any): Promise<EventType[]> {\n        try {\n            const res: AxiosResponse<EventType[]> = await commonAPI.get(`${this.configs.apiServiceURL.eventTypes}/user/${id}`);\n            return commonAPI.success(res);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Create new EventType\n     * @param obj EventType object\n     */\n    public async createNew(obj: EventType): Promise<any> {\n        try{\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.eventTypes}`, obj);\n            return commonAPI.success(res);\n        }\n        catch(e){\n            throw e;\n        }\n    }\n\n    /**\n     * Update EventType\n     * @param obj EventType's object\n     */\n    public async update(obj: EventType): Promise<any> {\n        try{\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.eventTypes}`, obj);\n            return commonAPI.success(res);\n        }\n        catch(e){\n            throw e;\n        }\n    }\n\n    /**\n     * Delete EventTypes\n     * @param objs EventType list\n     */\n    public async deleteRecords(objs: EventType[]) : Promise<any> {\n        try{\n            this.axiosConfig.data = objs;\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.eventTypes}`, this.axiosConfig);\n            return commonAPI.success(res);\n        }\n        catch(e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Generate EventType questions\n     * @param record EventType object\n     */\n    public getQuestion(record: EventType) {\n        let questions: QuestionBase<any>[] = [];\n\n        // Add location question\n        let validators: { [s: string]: Validator<any>; } = {};\n        validators = {}\n        validators[this.formConfig.formValidators.require] = {\n            value: true,\n            errorMessage: 'Name is required.'\n        };\n        questions.push(new TextboxQuestion({\n            key: 'name',\n            label: 'Name',\n            value: record.name,\n            validators: validators,\n            type: this.formConfig.inputTypeDef.text,\n            order: 100\n        }));\n\n        return questions.sort((a, b) => a.order - b.order);\n    }\n\n     /**\n      * Convert object from dynamic form to EventType\n      * @param form Dynamic form value\n      * @param EventType Current value\n      */\n    convertFormToObject(form: DynamicFormStates, eventType: EventType): EventType {\n        //convert form to EventType object\n        let formRecord = new EventType(form.listFields);\n        //those belong fields does not exist in form => add manually\n        formRecord._id = eventType._id;\n        formRecord.createdBy = eventType.createdBy;\n        formRecord.createdDate = eventType.createdDate;\n        formRecord.updatedBy = eventType.updatedBy;\n        formRecord.updatedDate = eventType.updatedDate;\n        return formRecord;\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { EventTypeService } from '../../service/EventType.service';\nimport { EventType } from \"../../class/eventType\";\nimport { DynamicFormStates, DynamicForm } from '../../share-components/DynamicForm';\nimport { AppState } from '../../redux/store';\nimport { updateAlert } from '../../redux/store/request/actions';\nimport { Config } from '../../configuration/config';\n\nconst ContainerDiv = styled.div`\n    width: 40%;\n    margin: auto;\n    padding-top: 50px;\n    padding-bottom: 100px;\n    font-size: small;\n    font-weight: 400;\n`;\n\ninterface EventTypeProps extends RouteComponentProps<any> {\n    updateAlert: typeof updateAlert\n}\n\ninterface EventTypeStates {\n    eventType: EventType\n}\n\nconst initialEventTypeStates: EventTypeStates = {\n    eventType: new EventType()\n}\n\nclass EventTypeComponent extends React.Component<EventTypeProps, EventTypeStates> {\n    eventTypeService: EventTypeService;\n    config: Config;\n    constructor(props: EventTypeProps) {\n        super(props);\n\n        this.state = initialEventTypeStates;\n        this.eventTypeService = new EventTypeService();\n        this.config = new Config();\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        //get EventType's detail\n        let eventTypeId = this.props.match.params['typeId'];\n        this.eventTypeService.getById(eventTypeId).then((eventType) => {\n            this.setState({ eventType });\n        });\n    }\n\n    /**\n     * Handle submit EventType\n     * @param form Dynamic form state\n     */\n    handleSubmit(form: DynamicFormStates) {\n        //get EventType object from dynamic form\n        let eventType = this.eventTypeService.convertFormToObject(form, this.state.eventType);\n        //submit change and reload page\n        this.eventTypeService.update(eventType)\n            .then((result) => {\n                window.location.reload();\n            })\n            .catch((err) => {\n                let message = (err.response && err.response.data) ? err.response.data : this.config.commonMessage.updateError;\n                //show error message\n                this.props.updateAlert({\n                    show: true,\n                    value: message,\n                    variant: this.config.alertVariants.danger\n                });\n            });\n    }\n\n    render() {\n        //Get questions (fields) of EventType that show on form to get infor from user\n        let questions = this.eventTypeService.getQuestion(this.state.eventType);\n        return (\n            <ContainerDiv>\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\n            </ContainerDiv>\n        );\n    }\n}\n\nconst MapStatesToProps = (store: AppState) => ({\n});\n\nconst MapDispatchToProps = {\n    updateAlert\n};\n\nexport default withRouter(connect(MapStatesToProps, MapDispatchToProps)(EventTypeComponent));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { Link, Switch, Route, RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport EventTypeComponent from '../../../components/EventType';\nimport { Config } from '../../../configuration/config';\nimport { AppState } from '../../store';\nimport { Table } from '../../../share-components/Table/Table';\nimport { CommonService } from '../../../service/common.service';\nimport { ReactModal, ModalActionType } from '../../../share-components/Modal/Modal';\nimport { DynamicFormStates } from '../../../share-components/DynamicForm';\nimport { EventTypeService } from '../../../service/EventType.service';\nimport { EventType } from '../../../class/eventType';\nimport { updateAlert } from '../../store/request/actions';\n\ninterface RouteLocation {\n    isNeedReload?: string;\n}\n\ninterface EventTypeContainerProps extends RouteComponentProps<{}, {}, RouteLocation> {\n    user: any,\n    updateAlert: typeof updateAlert\n}\n\ninterface EventTypeContainerStates {\n    allEventTypes: EventType[],\n    modalConfig: any\n}\n\nconst ContainerDiv = styled.div`\n    min-height: calc(100vh - 80px);\n`;\n\nclass EventTypeContainer extends Component<EventTypeContainerProps, EventTypeContainerStates> {\n    eventTypeService: EventTypeService;\n    commonService: CommonService;\n    config: Config;\n    constructor(props: EventTypeContainerProps) {\n        super(props);\n\n        this.state = {\n            allEventTypes: [],\n            modalConfig: {}\n        }\n        this.eventTypeService = new EventTypeService();\n        this.commonService = new CommonService();\n        this.config = new Config();\n\n        this.deleteEventTypeHandler = this.deleteEventTypeHandler.bind(this);\n        this.addEventTypeHandler = this.addEventTypeHandler.bind(this);\n        this.handleCreateEventTypeAction = this.handleCreateEventTypeAction.bind(this);\n    }\n\n    async componentDidMount() {\n        let eventTypes = await this.eventTypeService.getAllData();\n\n        this.setState({\n            allEventTypes: eventTypes\n        });\n    }\n\n    /**\n     * Handle delete EventType\n     * @param records deleted records\n     */\n    async deleteEventTypeHandler(records: EventType[]) {\n        let undeleteable = [\n            'Dropdown with Health Talk',\n            'Wellness Events',\n            'Fitness Activities'\n        ];\n        //get un-deleteable types from selected records\n        let unDeleteRecords = records.filter((value) => {\n            return undeleteable.indexOf(value.name) !== -1;\n        });\n\n        if (unDeleteRecords.length > 0) {\n            //there are some record with status are not pending for review\n            alert('Could not delete the selected record(s)');\n        }\n        else if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\n            //handle delete record after confirming\n            await this.eventTypeService.deleteRecords(records);\n            window.location.reload();\n        }\n    }\n\n    /**\n     * Handle create EventType\n     */\n    async handleCreateEventTypeAction(action: any, form: DynamicFormStates) {\n        //Hide popup\n        this.setState({\n            modalConfig: {}\n        });\n        //handle create EventType when user confirm\n        if (action === ModalActionType.OK) {\n            //get EventType object from dynamic form\n            let eventType = this.eventTypeService.convertFormToObject(form, new EventType());\n            this.eventTypeService.createNew(eventType)\n                .then((result) => {\n                    window.location.reload();\n                })\n                .catch((err) => {\n                    let message = (err.response && err.response.data) ? err.response.data : this.config.commonMessage.createError;\n                    //show error message\n                    this.props.updateAlert({\n                        show: true,\n                        value: message,\n                        variant: this.config.alertVariants.danger\n                    });\n                });\n        }\n    }\n\n    /**\n     * Handle business after user click (+) New button on list\n     */\n    addEventTypeHandler() {\n        //Get questions (fields) of EventType that show on form to get infor from user\n        let questions = this.eventTypeService.getQuestion(new EventType());\n        //Set value for popup\n        this.setState({\n            modalConfig: {\n                show: true,\n                modalTitle: 'Create new event type',\n                questions: questions\n            }\n        });\n    }\n\n    render() {\n        //Define column that be displayed on table\n        const columns = [\n            {\n                Header: 'Name',\n                id: 'name',\n                accessor: 'name',\n                Cell: ({ row }: { row: any }) => (<Link to={`eventtypes/${row.original._id}`}>{row.original.name}</Link>)\n            },\n            {\n                Header: 'Created By',\n                id: 'createdBy',\n                accessor: (row: EventType) => row.createdBy ? `${row.createdBy.firstName} ${row.createdBy.lastName}` : ''\n            },\n            {\n                Header: 'Created',\n                id: 'createdDate',\n                accessor: (row: EventType) => {\n                    let result = '';\n                    if (row.createdDate) {\n                        let accessor = new Date(row.createdDate);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            },\n            {\n                Header: 'Updated By',\n                id: 'updatedBy',\n                accessor: (row: EventType) => row.updatedBy ? `${row.updatedBy.firstName} ${row.updatedBy.lastName}` : ''\n            },\n            {\n                Header: 'Updated',\n                id: 'updatedDate',\n                accessor: (row: EventType) => {\n                    let result = '';\n                    if (row.updatedDate) {\n                        let accessor = new Date(row.updatedDate);\n                        result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMddHHmm)\n                    }\n                    return result;\n                }\n            }\n        ];\n        return (\n            <div>\n                {\n                    this.state.modalConfig.show ?\n                        (\n                            <ReactModal show={this.state.modalConfig.show}\n                                modalTitle={this.state.modalConfig.modalTitle}\n                                onActionFire={this.handleCreateEventTypeAction}\n                                questions={this.state.modalConfig.questions} />\n                        ) : ('')\n                }\n                <Switch>\n                    <Route exact path=\"/eventtypes\">\n                        <ContainerDiv>\n                            <Table columns={columns}\n                                data={this.state.allEventTypes}\n                                pageCount={this.state.allEventTypes.length}\n                                fetchData={() => { }}\n                                deleteRecordHandler={this.deleteEventTypeHandler}\n                                addRecordHandler={this.addEventTypeHandler}\n                                TableName=\"Event Types\"\n                            />\n                        </ContainerDiv>\n                    </Route>\n                    <Route path={`/eventtypes/:typeId`}>\n                        <EventTypeComponent />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nconst MapStatesToProps = (store: AppState) => {\n    return {\n        user: store.user\n    };\n}\n\nconst MapDispatchToProps = {\n    updateAlert\n};\n\nexport default withRouter(connect(MapStatesToProps, MapDispatchToProps)(EventTypeContainer))","import React from 'react';\n\nexport class Page401 extends React.Component {\n    render() {\n        return (\n            <div style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                minHeight: 'calc(100vh - 80px)',\n                color: 'red'\n            }\n            }>\n                <h2>401 Access denied</h2>\n            </div >\n        )\n    }\n}","import React from 'react';\nimport {\n\tHashRouter as Router,\n\tSwitch,\n\tRoute,\n\tRedirect\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nimport './App.css';\nimport SignUp from './components/Auth/SignUp/SignUp';\nimport { SignUpState } from './components/Auth/SignUp/SignUpPropsStates';\nimport Login from './components/Auth/Login/Login';\nimport { LoginState } from './components/Auth/Login/LoginPropsStates';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport { Config } from './configuration/config';\nimport { User } from './class/user';\nimport { Credentials } from './interface/Credentials';\nimport { UserServiceApi } from './service/User.service';\nimport { AppState } from './redux/store';\nimport { loginUser } from './redux/store/user/actions'\nimport BookingContainer from './redux/containers/Bookings/BookingContainer';\nimport { updateAlert } from './redux/store/request/actions';\nimport SecureRoute from './components/SecureRoute/SecureRoute';\nimport EventTypeContainer from './redux/containers/EventTypes/EventTypeContainer';\nimport { Page401 } from './components/Page401/Page401';\n\ninterface AppStates {\n\tredirectLogin: boolean,\n\tredirectHome: boolean\n}\n\ninterface AppProps {\n\tuser: any,\n\tloginUser: typeof loginUser;\n\tupdateAlert: typeof updateAlert\n}\n\nclass App extends React.Component<AppProps, AppStates> {\n\tuserService: UserServiceApi;\t//user service\n\tconfig: Config;\n\tconstructor(props: AppProps) {\n\t\tsuper(props);\n\t\t//initial variables\n\t\tthis.state = {\n\t\t\tredirectLogin: false,\n\t\t\tredirectHome: false\n\t\t}\n\t\tthis.userService = new UserServiceApi();\n\t\tthis.config = new Config();\n\n\t\tthis.handleOnSubmitLoginForm = this.handleOnSubmitLoginForm.bind(this);\n\t\tthis.handleOnSubmitRegisterForm = this.handleOnSubmitRegisterForm.bind(this);\n\t\tthis.handleRenderRedirectRouter = this.handleRenderRedirectRouter.bind(this);\n\t}\n\n\tcomponentDidUpdate() {\n\t\t//reset state to false to help the next time the redirect function effect to app\n\t\tif (this.state.redirectHome) {\n\t\t\tthis.setState({\n\t\t\t\tredirectHome: false\n\t\t\t});\n\t\t}\n\t\telse if (this.state.redirectLogin) {\n\t\t\tthis.setState({\n\t\t\t\tredirectLogin: false\n\t\t\t});\n\t\t}\n\t}\n\n\t//------------------------------------------LOG IN COMPONENT-----------------------------\n\t/**\n\t * handle login form submit\n\t * @param form login state\n\t */\n\tasync handleOnSubmitLoginForm(form: LoginState) {\n\t\t//create login's info send to server\n\t\tlet credentials: Credentials = {\n\t\t\tusername: form.email,\n\t\t\tpassword: form.password,\n\t\t\trememberMe: form.rememberMe\n\t\t}\n\t\tthis.userService.userLogin(credentials)\n\t\t\t.then((result) => {\n\t\t\t\t//login success\n\t\t\t\tif (result && result.email === form.email) {\n\t\t\t\t\tlet user = new User(result);\n\t\t\t\t\tuser.isAdmin = user.role === this.config.roleDefinition.fullertonAdmin;\n\t\t\t\t\tuser.isHr = user.role === this.config.roleDefinition.companyHR;\n\t\t\t\t\t//store login user to redux\n\t\t\t\t\tthis.props.loginUser(user);\n\t\t\t\t\t//redirect to dashboard(homepage)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tredirectHome: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//show alert message could not find user\n\t\t\t\t\tthis.props.updateAlert({\n\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\tvalue: this.config.commonMessage.userNotFound,\n\t\t\t\t\t\tvariant: this.config.alertVariants.danger\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).catch((err) => {\n\t\t\t\t//show alert message login fail\n\t\t\t\tthis.props.updateAlert({\n\t\t\t\t\tshow: true,\n\t\t\t\t\tvalue: this.config.commonMessage.loginError,\n\t\t\t\t\tvariant: this.config.alertVariants.danger\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t//------------------------------------------SIGN UP COMPONENT----------------------------\n\t/**\n\t * handle sign up form submit\n\t * @param form sign up state\n\t */\n\thandleOnSubmitRegisterForm(form: SignUpState) {\n\t\t//convert user's input to user's object\n\t\tlet newUser = new User({\n\t\t\tfirstName: form.firstName,\n\t\t\tlastName: form.lastName,\n\t\t\temail: form.email,\n\t\t\tpassword: form.password,\n\t\t\trole: this.config.roleDefinition.companyHR\t//Company HR (User): default\n\t\t});\n\t\tthis.userService.userRegister(newUser)\n\t\t\t.then((result) => {\n\t\t\t\t//redirect to login page when register successful\n\t\t\t\tthis.props.updateAlert({\n\t\t\t\t\tshow: true,\n\t\t\t\t\tvalue: this.config.commonMessage.signUpSuccess,\n\t\t\t\t\tvariant: this.config.alertVariants.success\n\t\t\t\t});\n\t\t\t\tthis.setState({\n\t\t\t\t\tredirectLogin: true\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tlet message = (err.response && err.response.data) ? err.response.data : this.config.commonMessage.signUpError;\n\t\t\t\t//show error message\n\t\t\t\tthis.props.updateAlert({\n\t\t\t\t\tshow: true,\n\t\t\t\t\tvalue: message,\n\t\t\t\t\tvariant: this.config.alertVariants.danger\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/**\n\t * Handle the case system want to redirect new page\n\t */\n\thandleRenderRedirectRouter() {\n\t\tif (this.state.redirectLogin) {\n\t\t\treturn (\n\t\t\t\t<Redirect push={true} to=\"/login\"></Redirect>\n\t\t\t)\n\t\t}\n\t\telse if (this.state.redirectHome) {\n\t\t\treturn (\n\t\t\t\t<Redirect push={true} to=\"/bookings\"></Redirect>\n\t\t\t)\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Toolbar />\n\t\t\t\t{\n\t\t\t\t\tthis.handleRenderRedirectRouter()\n\t\t\t\t}\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/login\">\n\t\t\t\t\t\t\t<Login OnLogin={this.handleOnSubmitLoginForm}\n\t\t\t\t\t\t\t\tRegisterPageRedirectLink=\"/signup\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t<SecureRoute path=\"/bookings\"\n\t\t\t\t\t\t\tcomponent={BookingContainer} />\n\n\t\t\t\t\t\t<SecureRoute path=\"/eventtypes\"\n\t\t\t\t\t\t\tadminOnly={true}\n\t\t\t\t\t\t\tcomponent={EventTypeContainer} />\n\n\t\t\t\t\t\t<Route exact path=\"/page401\">\n\t\t\t\t\t\t\t<Page401/>\n\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t<Route exact path=\"/signup\">\n\t\t\t\t\t\t\t<SignUp OnRegister={this.handleOnSubmitRegisterForm}\n\t\t\t\t\t\t\t\tLoginRedirectLink=\"/login\" />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state: AppState) => ({\n\tuser: state.user\n});\n\nconst MapDispatchToProps = {\n\tupdateAlert,\n\tloginUser\n};\n\nexport default connect(\n\tmapStateToProps,\n\tMapDispatchToProps\n)(App);","import {\n  USER_LOGIN,\n  USER_LOGOUT,\n  UserActionTypes\n} from \"./types\";\n\nconst initialState = {\n  currentUser: {},\n  userList: []\n}\n\nexport function userReducer(\n  state = initialState,\n  action: UserActionTypes\n): any {\n  switch (action.type) {\n    case USER_LOGIN:\n      return {\n        ...state, currentUser: action.payload\n      };\n    case USER_LOGOUT:\n      return {\n        ...state, currentUser: {}\n      };\n    default:\n      return state;\n  }\n}\n","import {\n\tUPDATE_REQUEST,\n\tUPDATE_ALERT,\n\tRequestActionTypes\n} from \"./types\";\n\nconst initialState = {\n\tnumberOfRequest: 0,\n\talertConfig: {}\n}\n\nexport function requestReducer(\n\tstate = initialState,\n\taction: RequestActionTypes\n): any {\n\tswitch (action.type) {\n\t\tcase UPDATE_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state, numberOfRequest: action.payload\n\t\t\t};\n\t\tcase UPDATE_ALERT:\n\t\t\treturn {\n\t\t\t\t...state, alertConfig: action.payload\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\n// import thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport axiosMiddleware from 'redux-axios-middleware';\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { userReducer } from \"./user/reducers\";\nimport { requestReducer } from \"./request/reducers\";\nimport { updateRequest } from \"./request/actions\";\nimport { commonAPI } from \"../../service/common-api.service\";\nimport { logoutUser } from \"./user/actions\";\n//define persistConfig\nconst persistConfig = {\n\tkey: 'root',\n\tstorage,\n}\n//combine all reducer\nconst rootReducer = combineReducers({\n\tuser: userReducer,\n\trequest: requestReducer\n});\n//define AppState\nexport type AppState = ReturnType<typeof rootReducer>;\n//persist reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n//add middleware redux-thunk => could view on chrome browser\n// const middlewares = [thunkMiddleware];\nlet numberOfRequest = 0;\nconst middlewareConfig = {\n\tinterceptors: {\n\t\trequest: [{\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, req : AxiosRequestConfig) {\n\t\t\t\tlet appState:AppState = getState();\n\t\t\t\treq.headers.Authorization =  `bearer ${appState.user.currentUser.token}`;\n\t\t\t\tnumberOfRequest++;\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\n\t\t\t\treturn req;\n\t\t\t},\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\t],\n\t\tresponse: [{\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, res : AxiosResponse) {\n\t\t\t\tnumberOfRequest--;\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\n\t\t\t\treturn res;\n\t\t\t},\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\n\t\t\t\tif(error.response && error.response.status === 401)\n\t\t\t\t{\n\t\t\t\t\tdispatch(logoutUser());\n\t\t\t\t}\n\t\t\t\tnumberOfRequest--;\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\t]\n\t}\n};\nconst middleWareEnhancer = applyMiddleware(\n\t// ...middlewares, \n\taxiosMiddleware(commonAPI.api, middlewareConfig)\n\t);\nexport default () => {\n\tlet store: any = createStore(\n\t\tpersistedReducer\n\t\t, composeWithDevTools(middleWareEnhancer)\n\t)\n\tlet persistor = persistStore(store)\n\treturn { store, persistor }\n}","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\nimport { connect } from 'react-redux';\nimport { AppState } from \"../../redux/store\";\nimport styled from \"styled-components\";\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    margin-top: 200px;\n    border-color: red;\n`;\nconst ContainerDiv = styled.div`\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    z-index: 10000;\n    opacity: 0.5;\n    background-color: gray;\n    top: 0px;\n`;\n\ninterface LoadingSpinnerProps {\n    numberOfRequest: number\n}\n\nclass LoadingSpinner extends React.Component<LoadingSpinnerProps, {}> {\n    render() {\n        return (\n            <div>\n                {\n                    this.props.numberOfRequest > 0 ?\n                        (\n                            <ContainerDiv className=\"sweet-loading\">\n                                <BounceLoader\n                                    css={override}\n                                    size={100}\n                                    loading={this.props.numberOfRequest > 0}\n                                />\n                            </ContainerDiv>\n                        )\n                        : ('')\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n    numberOfRequest: state.request.numberOfRequest\n});\n\nexport default connect(mapStateToProps, {})(LoadingSpinner);","import React from \"react\";\nimport Alert from 'react-bootstrap/Alert';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { Variant } from \"react-bootstrap/esm/types\";\n\nimport { AppState } from \"../../redux/store\";\nimport { updateAlert } from \"../../redux/store/request/actions\";\n\nconst ContainerDiv = styled.div`\n    position: fixed;\n    top: -20px;\n    width: 100%;\n    z-index: 1000000;\n    padding: 30px;\n`;\n\nconst CloseButton = styled.div`\n    float: right;\n    margin-top: -18px;\n    cursor: pointer;\n    margin-right: -10px;\n`;\n\nconst AlertStyle: React.CSSProperties = {\n    borderRadius: '.25rem'\n};\n\ninterface GlobalAlertProps {\n    show?: boolean,\n    variant?: Variant,\n    value?: any,\n    updateAlert: typeof updateAlert\n}\n\nclass GlobalAlert extends React.Component<GlobalAlertProps, {}> {\n\n    componentDidUpdate(){\n        if(this.props.show){\n            //hide alert after 2 seconds\n            setTimeout(()=>{\n                this.props.updateAlert({});\n            }, 2000)\n        }\n    }\n    \n    /**\n     * Handle click on close button [x]\n     */\n    handleOnCloseButton() {\n        this.props.updateAlert({});\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.props.show ?\n                        (\n                            <ContainerDiv>\n                                <Alert style={AlertStyle}\n                                    key=\"GlobalAlert\"\n                                    variant={this.props.variant}>\n                                    <CloseButton onClick={() => this.handleOnCloseButton()}>\n                                        <strong>x</strong>\n                                    </CloseButton>\n                                    {this.props.value}\n                                </Alert>\n                            </ContainerDiv>\n                        )\n                        : ('')\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppState) => {\n    if(state.request.alertConfig){\n        return {\n            show: state.request.alertConfig.show,\n            variant: state.request.alertConfig.variant,\n            value: state.request.alertConfig.value\n        }\n    }\n};\n\nconst MapDispatchToProps = {\n    updateAlert\n};\n\nexport default connect(mapStateToProps, MapDispatchToProps)(GlobalAlert);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport App from \"./App\";\nimport * as persistStore from './redux/store';\nimport LoadingSpinner from './share-components/Spinner/LoadingSpinner';\nimport GlobalAlert from './share-components/Alert/GlobalAlert';\n\nReactDOM.render(\n\t<Provider store={persistStore.default().store}>\n\t\t<PersistGate loading={null} persistor={persistStore.default().persistor}>\n\t\t\t<LoadingSpinner />\n\t\t\t<GlobalAlert />\n\t\t\t<App />\n\t\t</PersistGate>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","export * from './DynamicForm';\nexport * from './DynamicFormPropState';\nexport * from './form.config';\nexport * from './class/validator';\nexport * from './questions/question-base';\nexport * from './questions/question-dropdown';\nexport * from './questions/question-textarea';\nexport * from './questions/question-textbox';\nexport * from './questions/question-reference';\nexport * from './questions/question-datetime';\nexport * from './questions/question-radiobutton';","export class FormConfig {\n    formValidators = {          //the understand the value => refer the attributes of Validators in angular form, see in question-control.service.ts\n        require: \"required\",\n        minLength: \"minLength\",\n        maxLength: \"maxLength\",\n        email: \"email\"\n    }\n\n    inputTypeDef = {\n        button: 'button',\n        checkbox: 'checkbox',\n        color: 'color',\n        date: 'date',\n        datetime: 'datetime',\n        datetimeLocal: 'datetime-local',\n        email: 'email',\n        file: 'file',\n        hidden: 'hidden',\n        image: 'image',\n        month: 'month',\n        number: 'number',\n        password: 'password',\n        radio: 'radio',\n        range: 'range',\n        reset: 'reset',\n        search: 'search',\n        submit: 'submit',\n        tel: 'tel',\n        text: 'text',\n        time: 'time',\n        url: 'url',\n        week: 'week'\n    }\n\n    questionControlType = {\n        textbox: 'textbox',\n        textarea: 'textarea',\n        dropdown: 'dropdown',\n        radiobutton: 'radiobutton',\n        reference: 'reference',\n        datetime: 'datetime'\n    }\n}","import { Validator } from \"../class/validator\";\n\nexport class QuestionBase<T> {\n\tvalue?: T;\n\tkey: string;\n\tlabel: string;\n\trequired: boolean;\n\torder: number;\n\tcontrolType: string;\n\ttype: string;\n\toptions: { key: string, value: string }[];\n\tvalidators: {[s:string]: Validator<any>};\n\tmultiple: boolean;    //dropdown list multiple\n\trows: number;       //number of rows in text area\n\treadonly: boolean;  //question is readonly or not\n\tsearchBar: boolean;\n\tserverUrl: string;\n\tdisplayField: string;\n\tlistFields: string[];\n\tfilterCondition: string;\n\n\tconstructor(options: {\n\t\tvalue?: T,\n\t\tkey?: string,\n\t\tlabel?: string,\n\t\trequired?: boolean,\n\t\torder?: number,\n\t\tcontrolType?: string,\n\t\ttype?: string,\n\t\toptions?: { key: string, value: string }[],\n\t\tvalidators?: any,\n\t\tmultiple?: boolean,\n\t\trows?: number,\n\t\treadonly?: boolean,\n\t\tsearchBar?: boolean,\n\t\tserverUrl?: string,\n\t\tdisplayField?: string,\n\t\tlistFields?: string[],\n\t\tfilterCondition?: string\n\t} = {}) {\n\t\tthis.value = options.value;\n\t\tthis.key = options.key || '';\n\t\tthis.label = options.label || '';\n\t\tthis.required = !!options.required;\n\t\tthis.order = options.order === undefined ? 1 : options.order;\n\t\tthis.controlType = options.controlType || '';\n\t\tthis.type = options.type || '';\n\t\tthis.options = options.options || [];\n\t\tthis.validators = options.validators || [];\n\t\tthis.multiple = !!options.multiple;\n\t\tthis.rows = options.rows === undefined ? 1 : options.rows;\n\t\tthis.readonly = !!options.readonly;\n\t\tthis.searchBar = !!options.searchBar;\n\t\tthis.serverUrl = options.serverUrl || '';\n\t\tthis.displayField = options.displayField || '';\n\t\tthis.listFields = options.listFields || [];\n\t\tthis.filterCondition = options.filterCondition || '';\n\t}\n}\n","import { AxiosRequestConfig } from \"axios\";\nconst qs = require(\"qs\");\nexport const API_TIMEOUT = Number(process.env.REACT_APP_API_TIMEOUT) || 10000;\nexport const REACT_APP_SERVER_URL = process.env.REACT_APP_SERVER_URL || \"\";\n\nexport const apiConfig: AxiosRequestConfig = {\n    timeout: API_TIMEOUT,\n    baseURL: REACT_APP_SERVER_URL,\n    headers: {\n        common: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n        }\n    },\n    paramsSerializer: (params: string) => qs.stringify(params, { indices: false })\n};\n"],"sourceRoot":""}